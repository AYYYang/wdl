Lexer
-----

1) There are 3 hint tokens that need to be emitted properly:
  0) value_assign_hint - comes before any sequence that looks like: identifier + assign + identifier
  1) edge_stmt_hint - a statement that contains an edge_op
  2) node_stmt_hint - statement that does NOT contain edge_op and starts with: node_id

2) Lexer Notes:
  0) 'identifier' is:
    a) Any string of alphabetic ([a-zA-Z\200-\377]) characters, underscores ('_') or digits ([0-9]), not beginning with a digit
      i) [a-zA-Z\\200-\\377_]([0-9a-zA-Z\\200-\\377_])*
    b) a numeral [-]?(.[0-9]+ | [0-9]+(.[0-9]*)? )
      i) [-]?(\\.[0-9]+|[0-9]+(.[0-9]*)?)
    c) any double-quoted string ("...") possibly containing escaped quotes (\")
      i) \"(\\\"|[^\"])*\"
    d) an HTML string (<...>)
      i) <[^>]+>

3) Algorithm:
  0) Cache starts out empty
  1) Collect tokens in a cache until one of the following conditions happens:
    a) [\n\r]+
      i) if not within square brackets, goto stmt_end.
    b) {[\r\n]*
      i) output tokens in cache and clear cache.
    c) }[\r\n]+, or EOF
      i) if there are tokens in the cache, goto stmt_end.
    d) \\[\r\n]
      i) return
    stmt_end)
      i) if cache = ['identifier' + 'assign' + 'identifier'], hint = value_assign_hint
      ii) if cache contains edgeop, hint = edge_stmt_hint
      iii) if cache[0] = 'identifier' and cache does not contain edgeop, hint = node_stmt_hint
      iv) if cache[-1] != 'semi', semi = 'semi'
    end)
      i) rval = [hint] + cache + [semi]
      ii) cache = list()
      iii) return rval

