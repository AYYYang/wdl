import sys
import os
import re
import base64
import argparse
from collections import OrderedDict
# Common Code #
def parse_tree_string(parsetree, indent=None, b64_source=True, indent_level=0, debug=False):
    indent_str = (' ' * indent * indent_level) if indent else ''
    if isinstance(parsetree, ParseTree):
        children = [parse_tree_string(child, indent, b64_source, indent_level+1, debug) for child in parsetree.children]
        debug_str = parsetree.debug_str() if debug else ''
        if indent is None or len(children) == 0:
            return '{0}({1}: {2}{3})'.format(indent_str, parsetree.nonterminal, debug_str, ', '.join(children))
        else:
            return '{0}({1}:{2}\n{3}\n{4})'.format(
                indent_str,
                parsetree.nonterminal,
                debug_str,
                ',\n'.join(children),
                indent_str
            )
    elif isinstance(parsetree, Terminal):
        return indent_str + parsetree.dumps(b64_source=b64_source)
def ast_string(ast, indent=None, b64_source=True, indent_level=0):
    indent_str = (' ' * indent * indent_level) if indent else ''
    next_indent_str = (' ' * indent * (indent_level+1)) if indent else ''
    if isinstance(ast, Ast):
        children = OrderedDict([(k, ast_string(v, indent, b64_source, indent_level+1)) for k, v in ast.attributes.items()])
        if indent is None:
            return '({0}: {1})'.format(
                ast.name,
                ', '.join('{0}={1}'.format(k, v) for k, v in children.items())
            )
        else:
            return '({0}:\n{1}\n{2})'.format(
                ast.name,
                ',\n'.join(['{0}{1}={2}'.format(next_indent_str, k, v) for k, v in children.items()]),
                indent_str
            )
    elif isinstance(ast, list):
        children = [ast_string(element, indent, b64_source, indent_level+1) for element in ast]
        if indent is None or len(children) == 0:
            return '[{0}]'.format(', '.join(children))
        else:
            return '[\n{1}\n{0}]'.format(
                indent_str,
                ',\n'.join(['{0}{1}'.format(next_indent_str, child) for child in children]),
            )
    elif isinstance(ast, Terminal):
        return ast.dumps(b64_source=b64_source)
class Terminal:
  def __init__(self, id, str, source_string, resource, line, col):
      self.__dict__.update(locals())
  def getId(self):
      return self.id
  def ast(self):
      return self
  def dumps(self, b64_source=True, **kwargs):
      source_string = base64.b64encode(self.source_string.encode('utf-8')).decode('utf-8') if b64_source else self.source_string
      return '<{resource}:{line}:{col} {terminal} {source}>'.format(
          resource=self.resource,
          line=self.line,
          col=self.col,
          terminal=self.str,
          source=repr(source_string)
      )
  def __str__(self):
      return self.dumps()
class NonTerminal():
  def __init__(self, id, str):
    self.__dict__.update(locals())
    self.list = False
  def __str__(self):
    return self.str
class AstTransform:
  pass
class AstTransformSubstitution(AstTransform):
  def __init__(self, idx):
    self.__dict__.update(locals())
  def __repr__(self):
    return '$' + str(self.idx)
  def __str__(self):
    return self.__repr__()
class AstTransformNodeCreator(AstTransform):
  def __init__( self, name, parameters ):
    self.__dict__.update(locals())
  def __repr__( self ):
    return self.name + '( ' + ', '.join(['%s=$%s' % (k,str(v)) for k,v in self.parameters.items()]) + ' )'
  def __str__(self):
    return self.__repr__()
class AstList(list):
  def ast(self):
      retval = []
      for ast in self:
          retval.append(ast.ast())
      return retval
  def dumps(self, indent=None, b64_source=True):
      args = locals()
      del args['self']
      return ast_string(self, **args)
class ParseTree():
  def __init__(self, nonterminal):
      self.__dict__.update(locals())
      self.children = []
      self.astTransform = None
      self.isExpr = False
      self.isNud = False
      self.isPrefix = False
      self.isInfix = False
      self.nudMorphemeCount = 0
      self.isExprNud = False # true for rules like _expr := {_expr} + {...}
      self.listSeparator = None
      self.list = False
  def debug_str(self):
      from copy import deepcopy
      def h(v):
          if v == False or v is None:
              return str(v)
          from xtermcolor import colorize
          return colorize(str(v), ansi=190)
      d = deepcopy(self.__dict__)
      for key in ['self', 'nonterminal', 'children']:
          del d[key]
      f = {k: v for k, v in d.items() if v != False and v is not None}
      return '[{}]'.format(', '.join(['{}={}'.format(k,h(v)) for k,v in f.items()]))
  def add(self, tree):
      self.children.append( tree )
  def ast(self):
      if self.list == True:
          r = AstList()
          if len(self.children) == 0:
              return r
          end = max(0, len(self.children) - 1)
          for child in self.children[:end]:
              if isinstance(child, Terminal) and self.listSeparator is not None and child.id == self.listSeparator.id:
                  continue
              r.append(child.ast())
          r.extend(self.children[end].ast())
          return r
      elif self.isExpr:
          if isinstance(self.astTransform, AstTransformSubstitution):
              return self.children[self.astTransform.idx].ast()
          elif isinstance(self.astTransform, AstTransformNodeCreator):
              parameters = OrderedDict()
              for name, idx in self.astTransform.parameters.items():
                  if idx == '$':
                      child = self.children[0]
                  elif isinstance(self.children[0], ParseTree) and \
                       self.children[0].isNud and \
                       not self.children[0].isPrefix and \
                       not self.isExprNud and \
                       not self.isInfix:
                      if idx < self.children[0].nudMorphemeCount:
                          child = self.children[0].children[idx]
                      else:
                          index = idx - self.children[0].nudMorphemeCount + 1
                          child = self.children[index]
                  elif len(self.children) == 1 and not isinstance(self.children[0], ParseTree) and not isinstance(self.children[0], list):
                      return self.children[0]
                  else:
                      child = self.children[idx]
                  parameters[name] = child.ast()
              return Ast(self.astTransform.name, parameters)
      else:
          if isinstance(self.astTransform, AstTransformSubstitution):
              return self.children[self.astTransform.idx].ast()
          elif isinstance(self.astTransform, AstTransformNodeCreator):
              parameters = OrderedDict()
              for name, idx in self.astTransform.parameters.items():
                  parameters[name] = self.children[idx].ast()
              return Ast(self.astTransform.name, parameters)
          elif len(self.children):
              return self.children[0].ast()
          else:
              return None
  def dumps(self, indent=None, b64_source=True, debug=False):
      args = locals()
      del args['self']
      return parse_tree_string(self, **args)
class Ast():
    def __init__(self, name, attributes):
        self.__dict__.update(locals())
    def attr(self, attr):
        return self.attributes[attr]
    def dumps(self, indent=None, b64_source=True):
        args = locals()
        del args['self']
        return ast_string(self, **args)
class SyntaxError(Exception):
    def __init__(self, message):
        self.__dict__.update(locals())
    def __str__(self):
        return self.message
class TokenStream(list):
    def __init__(self, arg=[]):
        super().__init__(arg)
        self.index = 0
    def advance(self):
        self.index += 1
        return self.current()
    def last(self):
        return self[-1]
    def current(self):
        try:
            return self[self.index]
        except IndexError:
            return None
class DefaultSyntaxErrorHandler:
    def __init__(self):
        self.errors = []
    def _error(self, string):
        error = SyntaxError(string)
        self.errors.append(error)
        return error
    def unexpected_eof(self):
        return self._error("Error: unexpected end of file")
    def excess_tokens(self, next_token):
        return self._error("Finished parsing without consuming all tokens.  Next token was {next}".format(next=next_token))
    def unexpected_symbol(self, nonterminal, actual_terminal, expected_terminals, rule):
        return self._error("Unexpected symbol (line {line}, col {col}) when parsing parse_{nt}.  Expected {expected}, got {actual}.".format(
            line=actual_terminal.line,
            col=actual_terminal.col,
            nt=nonterminal,
            expected=', '.join(expected_terminals),
            actual=actual_terminal
        ))
    def no_more_tokens(self, nonterminal, expected_terminal, last_terminal):
        return self._error("No more tokens.  Expecting " + expected_terminal)
    def invalid_terminal(self, nonterminal, invalid_terminal):
        return self._error("Invalid symbol ID: {} ({})".format(invalid_terminal.id, invalid_terminal.string))
    def unrecognized_token(self, string, line, col):
        lines = string.split('\n')
        bad_line = lines[line-1]
        return self._error('Unrecognized token on line {}, column {}:\n\n{}\n{}'.format(
            line, col, bad_line, ''.join([' ' for x in range(col-1)]) + '^'
        ))
class ParserContext:
  def __init__(self, tokens, errors):
    self.__dict__.update(locals())
    self.nonterminal_string = None
    self.rule_string = None
# Parser Code #
terminals = {
    0: 'double_equal',
    1: 'boolean',
    2: 'double_ampersand',
    3: 'if',
    4: 'slash',
    5: 'task',
    6: 'qmark',
    7: 'lsquare',
    8: 'output',
    9: 'comma',
    10: 'scatter',
    11: 'gteq',
    12: 'integer',
    13: 'identifier',
    14: 'parameter_meta',
    15: 'equal',
    16: 'double_pipe',
    17: 'in',
    18: 'object',
    19: 'squote_string',
    20: 'e',
    21: 'not',
    22: 'type_e',
    23: 'asterisk',
    24: 'while',
    25: 'cmd_param_start',
    26: 'cmd_part',
    27: 'import',
    28: 'call',
    29: 'ns_identifier',
    30: 'raw_cmd_start',
    31: 'rsquare',
    32: 'plus',
    33: 'lparen',
    34: 'cmd_param_end',
    35: 'lteq',
    36: 'not_equal',
    37: 'lt',
    38: 'meta',
    39: 'colon',
    40: 'rparen',
    41: 'gt',
    42: 'lbrace',
    43: 'cmd_attr_hint',
    44: 'input',
    45: 'string',
    46: 'dot',
    47: 'type',
    48: 'as',
    49: 'percent',
    50: 'workflow',
    51: 'dash',
    52: 'raw_cmd_end',
    53: 'runtime',
    54: 'rbrace',
    55: 'float',
    56: 'dquote_string',
    57: 'raw_command',
    'double_equal': 0,
    'boolean': 1,
    'double_ampersand': 2,
    'if': 3,
    'slash': 4,
    'task': 5,
    'qmark': 6,
    'lsquare': 7,
    'output': 8,
    'comma': 9,
    'scatter': 10,
    'gteq': 11,
    'integer': 12,
    'identifier': 13,
    'parameter_meta': 14,
    'equal': 15,
    'double_pipe': 16,
    'in': 17,
    'object': 18,
    'squote_string': 19,
    'e': 20,
    'not': 21,
    'type_e': 22,
    'asterisk': 23,
    'while': 24,
    'cmd_param_start': 25,
    'cmd_part': 26,
    'import': 27,
    'call': 28,
    'ns_identifier': 29,
    'raw_cmd_start': 30,
    'rsquare': 31,
    'plus': 32,
    'lparen': 33,
    'cmd_param_end': 34,
    'lteq': 35,
    'not_equal': 36,
    'lt': 37,
    'meta': 38,
    'colon': 39,
    'rparen': 40,
    'gt': 41,
    'lbrace': 42,
    'cmd_attr_hint': 43,
    'input': 44,
    'string': 45,
    'dot': 46,
    'type': 47,
    'as': 48,
    'percent': 49,
    'workflow': 50,
    'dash': 51,
    'raw_cmd_end': 52,
    'runtime': 53,
    'rbrace': 54,
    'float': 55,
    'dquote_string': 56,
    'raw_command': 57,
}
# table[nonterminal][terminal] = rule
table = [
    [-1, -1, -1, 67, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, 67, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1],
    [-1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, 127, -1, -1, -1, -1, 127, 127, 127, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, 127, -1, -1, -1, -1, -1, -1, 130, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, 127, -1, -1, -1, 127, 127, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1],
    [-1, -1, -1, 77, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, 77, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, 77, 76, -1, -1, -1, -1, -1, 77, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, 24],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 17],
    [-1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, 20],
    [-1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 22, -1, -1, 19],
    [-1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 12, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 137, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 105, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1],
    [-1, -1, -1, 74, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, 73, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 18],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1],
    [-1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, 79, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, 79, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, 87, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, 101, -1, -1, -1, -1, -1, -1, 101, -1, -1, -1, -1, 100, -1, -1, -1, -1, -1, -1, 101, -1, 101, -1, -1, -1, 101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 101, -1, -1, 101, -1, -1, -1, -1, -1, -1, 101, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, 66, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, 66, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, 69, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 106, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 107, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
]
nonterminal_first = {
    58: [47, 3, 22, 10, 24, 28, -1],
    59: [1, 32, 33, 12, 13, 45, 18, 19, 20, 21, 51, 55, 56, -1],
    60: [48],
    61: [9, -1],
    62: [26, -1, 25],
    63: [48, -1],
    64: [13],
    65: [57, 38, 8, 14, 53],
    66: [47, 22],
    67: [43, -1],
    68: [-1],
    69: [57, 38, 53, 8, -1, 14],
    70: [57, 38, 53, 8, -1, 14],
    71: [50, 5, -1],
    72: [48, -1],
    73: [8],
    74: [47, 22, -1],
    75: [44, -1],
    76: [13, -1],
    77: [45, -1],
    78: [43],
    79: [47, 22, -1],
    80: [38],
    81: [47, 22],
    82: [50],
    83: [26, 25],
    84: [26, -1, 25],
    85: [47, 24, 3, 28, 22, 10],
    86: [28],
    87: [47, -1, 22],
    88: [27],
    89: [-1],
    90: [25],
    91: [47, -1, 22],
    92: [13, -1],
    93: [50, 5],
    94: [10],
    95: [23, 6, 32],
    96: [44],
    97: [50, 5, 27, -1],
    98: [],
    99: [5],
    100: [57],
    101: [13, -1],
    102: [23, 6, 32, -1],
    103: [47, -1, 22],
    104: [24],
    105: [3],
    106: [42],
    107: [42, -1],
    108: [13],
    109: [47, -1, 22],
    110: [15],
    111: [42],
    112: [47, 22],
    113: [50, 5, -1],
    114: [9, -1],
    115: [13],
    116: [43, -1],
    117: [27, -1],
    118: [44, -1],
    119: [14],
    120: [-1, 15],
    121: [9, -1],
    122: [48],
    123: [13, -1],
    124: [53],
    125: [27, -1],
    126: [47, 3, 22, 10, 24, 28, -1],
    127: [9, -1],
    128: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
}
nonterminal_follow = {
    58: [54],
    59: [40],
    60: [50, 5, 27, -1],
    61: [44, 54],
    62: [52],
    63: [47, 3, 22, 10, 24, 42, 54, 28],
    64: [44, 54, 9],
    65: [38, 53, 54, 8, 14, 57],
    66: [31, 13, 9],
    67: [45],
    68: [8, 38, 53, 14, 57],
    69: [54],
    70: [54],
    71: [-1],
    72: [50, 5, 27, -1],
    73: [8, 38, 53, 54, 14, 57],
    74: [13],
    75: [54],
    76: [54],
    77: [47, 22],
    78: [43, 45],
    79: [31],
    80: [8, 38, 53, 54, 14, 57],
    81: [47, 54, 22],
    82: [50, 5, -1],
    83: [52, 26, 25],
    84: [52],
    85: [47, 24, 3, 54, 28, 22, 10],
    86: [47, 3, 22, 10, 24, 54, 28],
    87: [44],
    88: [50, 5, 27, -1],
    89: [57, 38, 53, 14, 8],
    90: [52, 26, 25],
    91: [54],
    92: [54],
    93: [50, 5, -1],
    94: [47, 3, 22, 10, 24, 54, 28],
    95: [34],
    96: [44, 54],
    97: [-1],
    98: [8, 38, 53, 14, 57],
    99: [50, 5, -1],
    100: [8, 38, 53, 54, 14, 57],
    101: [54],
    102: [34],
    103: [54],
    104: [47, 3, 22, 10, 24, 54, 28],
    105: [47, 3, 22, 10, 24, 54, 28],
    106: [47, 3, 22, 10, 24, 54, 28],
    107: [47, 3, 22, 10, 24, 54, 28],
    108: [54, 9],
    109: [44],
    110: [47, 3, 22, 10, 24, 54, 44, 28],
    111: [8, 38, 53, 54, 14, 57],
    112: [47, 24, 3, 54, 44, 28, 22, 10],
    113: [-1],
    114: [54],
    115: [54, 13],
    116: [45],
    117: [50, 5, -1],
    118: [54],
    119: [8, 38, 53, 54, 14, 57],
    120: [47, 3, 22, 10, 24, 54, 44, 28],
    121: [40],
    122: [47, 3, 22, 10, 24, 42, 54, 28],
    123: [44, 54],
    124: [8, 38, 53, 54, 14, 57],
    125: [50, 5, -1],
    126: [54],
    127: [31],
    128: [0, 31, 2, 32, 4, 3, 35, 9, 10, 36, 37, 11, 40, 41, 44, 43, 13, 45, 47, 16, 49, 22, 51, 23, 24, 54, 28],
}
rule_first = {
    0: [27],
    1: [27],
    2: [-1],
    3: [-1],
    4: [50, 5],
    5: [50, 5],
    6: [-1],
    7: [-1],
    8: [50, 5, 27, -1],
    9: [50],
    10: [5],
    11: [48],
    12: [-1],
    13: [27],
    14: [48],
    15: [],
    16: [],
    17: [-1],
    18: [-1],
    19: [57, 38, 53, 8, 14],
    20: [57, 38, 53, 8, 14],
    21: [-1],
    22: [-1],
    23: [5],
    24: [57],
    25: [8],
    26: [53],
    27: [14],
    28: [38],
    29: [26, 25],
    30: [26, 25],
    31: [-1],
    32: [-1],
    33: [57],
    34: [26],
    35: [25],
    36: [43],
    37: [43],
    38: [-1],
    39: [-1],
    40: [45],
    41: [-1],
    42: [47, 22],
    43: [-1],
    44: [23, 6, 32],
    45: [-1],
    46: [25],
    47: [43],
    48: [6],
    49: [32],
    50: [23],
    51: [47, 22],
    52: [47, 22],
    53: [-1],
    54: [-1],
    55: [8],
    56: [47, 22],
    57: [53],
    58: [14],
    59: [38],
    60: [13],
    61: [13],
    62: [-1],
    63: [-1],
    64: [42],
    65: [13],
    66: [47, 24, 3, 28, 22, 10],
    67: [47, 24, 3, 28, 22, 10],
    68: [-1],
    69: [-1],
    70: [50],
    71: [28],
    72: [47, 22],
    73: [24],
    74: [3],
    75: [10],
    76: [48],
    77: [-1],
    78: [42],
    79: [-1],
    80: [28],
    81: [47, 22],
    82: [47, 22],
    83: [-1],
    84: [-1],
    85: [44],
    86: [44],
    87: [-1],
    88: [-1],
    89: [42],
    90: [13],
    91: [9],
    92: [-1],
    93: [-1],
    94: [44],
    95: [13],
    96: [48],
    97: [24],
    98: [3],
    99: [10],
    100: [15],
    101: [-1],
    102: [47, 22],
    103: [15],
    104: [13],
    105: [47, 22],
    106: [9],
    107: [-1],
    108: [-1],
    109: [47],
    110: [47],
    111: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    112: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    113: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    114: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    115: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    116: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    117: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    118: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    119: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    120: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    121: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    122: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    123: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    124: [21],
    125: [32],
    126: [51],
    127: [1, 32, 18, 19, 20, 21, 33, 51, 12, 55, 56, 13, 45],
    128: [9],
    129: [-1],
    130: [-1],
    131: [13],
    132: [13],
    133: [13],
    134: [13],
    135: [9],
    136: [-1],
    137: [-1],
    138: [18],
    139: [33],
    140: [45],
    141: [13],
    142: [1],
    143: [12],
    144: [55],
    145: [56],
    146: [19],
}
nonterminal_rules = {
    58: [
        "$_gen21 = $wf_body_element $_gen21",
        "$_gen21 = :_empty",
    ],
    59: [
        "$_gen33 = $e $_gen34",
        "$_gen33 = :_empty",
    ],
    60: [
        "$import_namespace = :as :identifier -> $1",
    ],
    61: [
        "$_gen29 = :comma $mapping $_gen29",
        "$_gen29 = :_empty",
    ],
    62: [
        "$_gen10 = $command_part $_gen10",
        "$_gen10 = :_empty",
    ],
    63: [
        "$_gen22 = $alias",
        "$_gen22 = :_empty",
    ],
    64: [
        "$mapping = :identifier :equal $e -> IOMapping( key=$0, value=$2 )",
    ],
    65: [
        "$sections = $command",
        "$sections = $outputs",
        "$sections = $runtime",
        "$sections = $parameter_meta",
        "$sections = $meta",
    ],
    66: [
        "$type_e = :type <=> :lsquare $_gen31 :rsquare -> Type( name=$0, subtype=$2 )",
        "$type_e = :type",
    ],
    67: [
        "$_gen11 = $cmd_param_kv $_gen12",
        "$_gen11 = :_empty",
    ],
    68: [
        "$_gen6 = $declarations $_gen6",
        "$_gen6 = :_empty",
    ],
    69: [
        "$_gen8 = $sections $_gen8",
        "$_gen8 = :_empty",
    ],
    70: [
        "$_gen7 = $sections $_gen8",
        "$_gen7 = :_empty",
    ],
    71: [
        "$_gen2 = $workflow_or_task $_gen3",
        "$_gen2 = :_empty",
    ],
    72: [
        "$_gen4 = $import_namespace",
        "$_gen4 = :_empty",
    ],
    73: [
        "$outputs = :output :lbrace $_gen16 :rbrace -> Outputs( attributes=$2 )",
    ],
    74: [
        "$_gen14 = $type_e",
        "$_gen14 = :_empty",
    ],
    75: [
        "$_gen26 = $call_input $_gen27",
        "$_gen26 = :_empty",
    ],
    76: [
        "$_gen35 = $object_kv $_gen36",
        "$_gen35 = :_empty",
    ],
    77: [
        "$_gen13 = :string",
        "$_gen13 = :_empty",
    ],
    78: [
        "$cmd_param_kv = :cmd_attr_hint :identifier :equal $e -> CommandParameterAttr( key=$1, value=$3 )",
    ],
    79: [
        "$_gen31 = $type_e $_gen32",
        "$_gen31 = :_empty",
    ],
    80: [
        "$meta = :meta $map -> Meta( map=$1 )",
    ],
    81: [
        "$output_kv = $type_e :identifier :equal $e -> Output( type=$0, var=$1, expression=$3 )",
    ],
    82: [
        "$workflow = :workflow :identifier :lbrace $_gen20 :rbrace -> Workflow( name=$1, body=$3 )",
    ],
    83: [
        "$command_part = :cmd_part",
        "$command_part = $cmd_param",
    ],
    84: [
        "$_gen9 = $command_part $_gen10",
        "$_gen9 = :_empty",
    ],
    85: [
        "$wf_body_element = $call",
        "$wf_body_element = $declaration",
        "$wf_body_element = $while_loop",
        "$wf_body_element = $if_stmt",
        "$wf_body_element = $scatter",
    ],
    86: [
        "$call = :call :ns_identifier $_gen22 $_gen23 -> Call( task=$1, alias=$2, body=$3 )",
    ],
    87: [
        "$_gen25 = $declaration $_gen25",
        "$_gen25 = :_empty",
    ],
    88: [
        "$import = :import :string $_gen4 -> Import( uri=$1, namespace=$2 )",
    ],
    89: [
        "$_gen5 = $declarations $_gen6",
        "$_gen5 = :_empty",
    ],
    90: [
        "$cmd_param = :cmd_param_start $_gen11 $_gen13 $_gen14 :identifier $_gen15 :cmd_param_end -> CommandParameter( name=$4, type=$3, prefix=$2, attributes=$1, postfix=$5 )",
    ],
    91: [
        "$_gen17 = $output_kv $_gen17",
        "$_gen17 = :_empty",
    ],
    92: [
        "$_gen18 = $kv $_gen19",
        "$_gen18 = :_empty",
    ],
    93: [
        "$workflow_or_task = $workflow",
        "$workflow_or_task = $task",
    ],
    94: [
        "$scatter = :scatter :lparen :identifier :in $e :rparen :lbrace $_gen20 :rbrace -> Scatter( item=$2, collection=$4, body=$7 )",
    ],
    95: [
        "$postfix_quantifier = :qmark",
        "$postfix_quantifier = :plus",
        "$postfix_quantifier = :asterisk",
    ],
    96: [
        "$call_input = :input :colon $_gen28 -> Inputs( map=$2 )",
    ],
    97: [
        "$document = $_gen0 $_gen2 -> Document( imports=$0, definitions=$1 )",
    ],
    98: [
    ],
    99: [
        "$task = :task :identifier :lbrace $_gen5 $_gen7 :rbrace -> Task( name=$1, declarations=$3, sections=$4 )",
    ],
    100: [
        "$command = :raw_command :raw_cmd_start $_gen9 :raw_cmd_end -> RawCommand( parts=$2 )",
    ],
    101: [
        "$_gen19 = $kv $_gen19",
        "$_gen19 = :_empty",
    ],
    102: [
        "$_gen15 = $postfix_quantifier",
        "$_gen15 = :_empty",
    ],
    103: [
        "$_gen16 = $output_kv $_gen17",
        "$_gen16 = :_empty",
    ],
    104: [
        "$while_loop = :while :lparen $e :rparen :lbrace $_gen20 :rbrace -> WhileLoop( expression=$2, body=$5 )",
    ],
    105: [
        "$if_stmt = :if :lparen $e :rparen :lbrace $_gen20 :rbrace -> If( expression=$2, body=$5 )",
    ],
    106: [
        "$call_body = :lbrace $_gen24 $_gen26 :rbrace -> CallBody( declarations=$1, io=$2 )",
    ],
    107: [
        "$_gen23 = $call_body",
        "$_gen23 = :_empty",
    ],
    108: [
        "$object_kv = :identifier :colon $e -> ObjectKV( key=$0, value=$2 )",
    ],
    109: [
        "$_gen24 = $declaration $_gen25",
        "$_gen24 = :_empty",
    ],
    110: [
        "$setter = :equal $e -> $1",
    ],
    111: [
        "$map = :lbrace $_gen18 :rbrace -> $1",
    ],
    112: [
        "$declaration = $type_e :identifier $_gen30 -> Declaration( type=$0, name=$1, expression=$2 )",
    ],
    113: [
        "$_gen3 = $workflow_or_task $_gen3",
        "$_gen3 = :_empty",
    ],
    114: [
        "$_gen36 = :comma $object_kv $_gen36",
        "$_gen36 = :_empty",
    ],
    115: [
        "$kv = :identifier :colon $e -> RuntimeAttribute( key=$0, value=$2 )",
    ],
    116: [
        "$_gen12 = $cmd_param_kv $_gen12",
        "$_gen12 = :_empty",
    ],
    117: [
        "$_gen1 = $import $_gen1",
        "$_gen1 = :_empty",
    ],
    118: [
        "$_gen27 = $call_input $_gen27",
        "$_gen27 = :_empty",
    ],
    119: [
        "$parameter_meta = :parameter_meta $map -> ParameterMeta( map=$1 )",
    ],
    120: [
        "$_gen30 = $setter",
        "$_gen30 = :_empty",
    ],
    121: [
        "$_gen34 = :comma $e $_gen34",
        "$_gen34 = :_empty",
    ],
    122: [
        "$alias = :as :identifier -> $1",
    ],
    123: [
        "$_gen28 = $mapping $_gen29",
        "$_gen28 = :_empty",
    ],
    124: [
        "$runtime = :runtime $map -> Runtime( map=$1 )",
    ],
    125: [
        "$_gen0 = $import $_gen1",
        "$_gen0 = :_empty",
    ],
    126: [
        "$_gen20 = $wf_body_element $_gen21",
        "$_gen20 = :_empty",
    ],
    127: [
        "$_gen32 = :comma $type_e $_gen32",
        "$_gen32 = :_empty",
    ],
    128: [
        "$e = $e :double_pipe $e -> LogicalOr( lhs=$0, rhs=$2 )",
        "$e = $e :double_ampersand $e -> LogicalAnd( lhs=$0, rhs=$2 )",
        "$e = $e :double_equal $e -> Equals( lhs=$0, rhs=$2 )",
        "$e = $e :not_equal $e -> NotEquals( lhs=$0, rhs=$2 )",
        "$e = $e :lt $e -> LessThan( lhs=$0, rhs=$2 )",
        "$e = $e :lteq $e -> LessThanOrEqual( lhs=$0, rhs=$2 )",
        "$e = $e :gt $e -> GreaterThan( lhs=$0, rhs=$2 )",
        "$e = $e :gteq $e -> GreaterThanOrEqual( lhs=$0, rhs=$2 )",
        "$e = $e :plus $e -> Add( lhs=$0, rhs=$2 )",
        "$e = $e :dash $e -> Subtract( lhs=$0, rhs=$2 )",
        "$e = $e :asterisk $e -> Multiply( lhs=$0, rhs=$2 )",
        "$e = $e :slash $e -> Divide( lhs=$0, rhs=$2 )",
        "$e = $e :percent $e -> Remainder( lhs=$0, rhs=$2 )",
        "$e = :not $e -> LogicalNot( expression=$1 )",
        "$e = :plus $e -> UnaryPlus( expression=$1 )",
        "$e = :dash $e -> UnaryNegation( expression=$1 )",
        "$e = :identifier <=> :lparen $_gen33 :rparen -> FunctionCall( name=$0, params=$2 )",
        "$e = :identifier <=> :lsquare $e :rsquare -> ArrayIndex( lhs=$0, rhs=$2 )",
        "$e = :identifier <=> :dot :identifier -> MemberAccess( lhs=$0, rhs=$2 )",
        "$e = :object :lbrace $_gen35 :rbrace -> ObjectLiteral( map=$2 )",
        "$e = :lparen $e :rparen -> $1",
        "$e = :string",
        "$e = :identifier",
        "$e = :boolean",
        "$e = :integer",
        "$e = :float",
        "$e = :dquote_string",
        "$e = :squote_string",
    ],
}
rules = {
    0: "$_gen0 = $import $_gen1",
    1: "$_gen1 = $import $_gen1",
    2: "$_gen1 = :_empty",
    3: "$_gen0 = :_empty",
    4: "$_gen2 = $workflow_or_task $_gen3",
    5: "$_gen3 = $workflow_or_task $_gen3",
    6: "$_gen3 = :_empty",
    7: "$_gen2 = :_empty",
    8: "$document = $_gen0 $_gen2 -> Document( imports=$0, definitions=$1 )",
    9: "$workflow_or_task = $workflow",
    10: "$workflow_or_task = $task",
    11: "$_gen4 = $import_namespace",
    12: "$_gen4 = :_empty",
    13: "$import = :import :string $_gen4 -> Import( uri=$1, namespace=$2 )",
    14: "$import_namespace = :as :identifier -> $1",
    15: "$_gen5 = $declarations $_gen6",
    16: "$_gen6 = $declarations $_gen6",
    17: "$_gen6 = :_empty",
    18: "$_gen5 = :_empty",
    19: "$_gen7 = $sections $_gen8",
    20: "$_gen8 = $sections $_gen8",
    21: "$_gen8 = :_empty",
    22: "$_gen7 = :_empty",
    23: "$task = :task :identifier :lbrace $_gen5 $_gen7 :rbrace -> Task( name=$1, declarations=$3, sections=$4 )",
    24: "$sections = $command",
    25: "$sections = $outputs",
    26: "$sections = $runtime",
    27: "$sections = $parameter_meta",
    28: "$sections = $meta",
    29: "$_gen9 = $command_part $_gen10",
    30: "$_gen10 = $command_part $_gen10",
    31: "$_gen10 = :_empty",
    32: "$_gen9 = :_empty",
    33: "$command = :raw_command :raw_cmd_start $_gen9 :raw_cmd_end -> RawCommand( parts=$2 )",
    34: "$command_part = :cmd_part",
    35: "$command_part = $cmd_param",
    36: "$_gen11 = $cmd_param_kv $_gen12",
    37: "$_gen12 = $cmd_param_kv $_gen12",
    38: "$_gen12 = :_empty",
    39: "$_gen11 = :_empty",
    40: "$_gen13 = :string",
    41: "$_gen13 = :_empty",
    42: "$_gen14 = $type_e",
    43: "$_gen14 = :_empty",
    44: "$_gen15 = $postfix_quantifier",
    45: "$_gen15 = :_empty",
    46: "$cmd_param = :cmd_param_start $_gen11 $_gen13 $_gen14 :identifier $_gen15 :cmd_param_end -> CommandParameter( name=$4, type=$3, prefix=$2, attributes=$1, postfix=$5 )",
    47: "$cmd_param_kv = :cmd_attr_hint :identifier :equal $e -> CommandParameterAttr( key=$1, value=$3 )",
    48: "$postfix_quantifier = :qmark",
    49: "$postfix_quantifier = :plus",
    50: "$postfix_quantifier = :asterisk",
    51: "$_gen16 = $output_kv $_gen17",
    52: "$_gen17 = $output_kv $_gen17",
    53: "$_gen17 = :_empty",
    54: "$_gen16 = :_empty",
    55: "$outputs = :output :lbrace $_gen16 :rbrace -> Outputs( attributes=$2 )",
    56: "$output_kv = $type_e :identifier :equal $e -> Output( type=$0, var=$1, expression=$3 )",
    57: "$runtime = :runtime $map -> Runtime( map=$1 )",
    58: "$parameter_meta = :parameter_meta $map -> ParameterMeta( map=$1 )",
    59: "$meta = :meta $map -> Meta( map=$1 )",
    60: "$_gen18 = $kv $_gen19",
    61: "$_gen19 = $kv $_gen19",
    62: "$_gen19 = :_empty",
    63: "$_gen18 = :_empty",
    64: "$map = :lbrace $_gen18 :rbrace -> $1",
    65: "$kv = :identifier :colon $e -> RuntimeAttribute( key=$0, value=$2 )",
    66: "$_gen20 = $wf_body_element $_gen21",
    67: "$_gen21 = $wf_body_element $_gen21",
    68: "$_gen21 = :_empty",
    69: "$_gen20 = :_empty",
    70: "$workflow = :workflow :identifier :lbrace $_gen20 :rbrace -> Workflow( name=$1, body=$3 )",
    71: "$wf_body_element = $call",
    72: "$wf_body_element = $declaration",
    73: "$wf_body_element = $while_loop",
    74: "$wf_body_element = $if_stmt",
    75: "$wf_body_element = $scatter",
    76: "$_gen22 = $alias",
    77: "$_gen22 = :_empty",
    78: "$_gen23 = $call_body",
    79: "$_gen23 = :_empty",
    80: "$call = :call :ns_identifier $_gen22 $_gen23 -> Call( task=$1, alias=$2, body=$3 )",
    81: "$_gen24 = $declaration $_gen25",
    82: "$_gen25 = $declaration $_gen25",
    83: "$_gen25 = :_empty",
    84: "$_gen24 = :_empty",
    85: "$_gen26 = $call_input $_gen27",
    86: "$_gen27 = $call_input $_gen27",
    87: "$_gen27 = :_empty",
    88: "$_gen26 = :_empty",
    89: "$call_body = :lbrace $_gen24 $_gen26 :rbrace -> CallBody( declarations=$1, io=$2 )",
    90: "$_gen28 = $mapping $_gen29",
    91: "$_gen29 = :comma $mapping $_gen29",
    92: "$_gen29 = :_empty",
    93: "$_gen28 = :_empty",
    94: "$call_input = :input :colon $_gen28 -> Inputs( map=$2 )",
    95: "$mapping = :identifier :equal $e -> IOMapping( key=$0, value=$2 )",
    96: "$alias = :as :identifier -> $1",
    97: "$while_loop = :while :lparen $e :rparen :lbrace $_gen20 :rbrace -> WhileLoop( expression=$2, body=$5 )",
    98: "$if_stmt = :if :lparen $e :rparen :lbrace $_gen20 :rbrace -> If( expression=$2, body=$5 )",
    99: "$scatter = :scatter :lparen :identifier :in $e :rparen :lbrace $_gen20 :rbrace -> Scatter( item=$2, collection=$4, body=$7 )",
    100: "$_gen30 = $setter",
    101: "$_gen30 = :_empty",
    102: "$declaration = $type_e :identifier $_gen30 -> Declaration( type=$0, name=$1, expression=$2 )",
    103: "$setter = :equal $e -> $1",
    104: "$object_kv = :identifier :colon $e -> ObjectKV( key=$0, value=$2 )",
    105: "$_gen31 = $type_e $_gen32",
    106: "$_gen32 = :comma $type_e $_gen32",
    107: "$_gen32 = :_empty",
    108: "$_gen31 = :_empty",
    109: "$type_e = :type <=> :lsquare $_gen31 :rsquare -> Type( name=$0, subtype=$2 )",
    110: "$type_e = :type",
    111: "$e = $e :double_pipe $e -> LogicalOr( lhs=$0, rhs=$2 )",
    112: "$e = $e :double_ampersand $e -> LogicalAnd( lhs=$0, rhs=$2 )",
    113: "$e = $e :double_equal $e -> Equals( lhs=$0, rhs=$2 )",
    114: "$e = $e :not_equal $e -> NotEquals( lhs=$0, rhs=$2 )",
    115: "$e = $e :lt $e -> LessThan( lhs=$0, rhs=$2 )",
    116: "$e = $e :lteq $e -> LessThanOrEqual( lhs=$0, rhs=$2 )",
    117: "$e = $e :gt $e -> GreaterThan( lhs=$0, rhs=$2 )",
    118: "$e = $e :gteq $e -> GreaterThanOrEqual( lhs=$0, rhs=$2 )",
    119: "$e = $e :plus $e -> Add( lhs=$0, rhs=$2 )",
    120: "$e = $e :dash $e -> Subtract( lhs=$0, rhs=$2 )",
    121: "$e = $e :asterisk $e -> Multiply( lhs=$0, rhs=$2 )",
    122: "$e = $e :slash $e -> Divide( lhs=$0, rhs=$2 )",
    123: "$e = $e :percent $e -> Remainder( lhs=$0, rhs=$2 )",
    124: "$e = :not $e -> LogicalNot( expression=$1 )",
    125: "$e = :plus $e -> UnaryPlus( expression=$1 )",
    126: "$e = :dash $e -> UnaryNegation( expression=$1 )",
    127: "$_gen33 = $e $_gen34",
    128: "$_gen34 = :comma $e $_gen34",
    129: "$_gen34 = :_empty",
    130: "$_gen33 = :_empty",
    131: "$e = :identifier <=> :lparen $_gen33 :rparen -> FunctionCall( name=$0, params=$2 )",
    132: "$e = :identifier <=> :lsquare $e :rsquare -> ArrayIndex( lhs=$0, rhs=$2 )",
    133: "$e = :identifier <=> :dot :identifier -> MemberAccess( lhs=$0, rhs=$2 )",
    134: "$_gen35 = $object_kv $_gen36",
    135: "$_gen36 = :comma $object_kv $_gen36",
    136: "$_gen36 = :_empty",
    137: "$_gen35 = :_empty",
    138: "$e = :object :lbrace $_gen35 :rbrace -> ObjectLiteral( map=$2 )",
    139: "$e = :lparen $e :rparen -> $1",
    140: "$e = :string",
    141: "$e = :identifier",
    142: "$e = :boolean",
    143: "$e = :integer",
    144: "$e = :float",
    145: "$e = :dquote_string",
    146: "$e = :squote_string",
}
def is_terminal(id): return isinstance(id, int) and 0 <= id <= 57
def parse(tokens, errors=None, start=None):
    if errors is None:
        errors = DefaultSyntaxErrorHandler()
    if isinstance(tokens, str):
        tokens = lex(tokens, 'string', errors)
    ctx = ParserContext(tokens, errors)
    tree = parse_document(ctx)
    if tokens.current() != None:
        raise ctx.errors.excess_tokens(tokens.current())
    return tree
def expect(ctx, terminal_id):
    current = ctx.tokens.current()
    if not current:
        raise ctx.errors.no_more_tokens(ctx.nonterminal, terminals[terminal_id], ctx.tokens.last())
    if current.id != terminal_id:
        raise ctx.errors.unexpected_symbol(ctx.nonterminal, current, [terminals[terminal_id]], ctx.rule)
    next = ctx.tokens.advance()
    if next and not is_terminal(next.id):
        raise ctx.errors.invalid_terminal(ctx.nonterminal, next)
    return current
# START definitions for expression parser: type_e
infix_binding_power_type_e = {
    7: 1000, # $type_e = :type <=> :lsquare list(nt=$type_e, sep=:comma, min=0, sep_terminates=False) :rsquare -> Type( name=$0, subtype=$2 )
}
prefix_binding_power_type_e = {
}
def get_infix_binding_power_type_e(terminal_id):
    try:
        return infix_binding_power_type_e[terminal_id]
    except:
        return 0
def get_prefix_binding_power_type_e(terminal_id):
    try:
        return prefix_binding_power_type_e[terminal_id]
    except:
        return 0
def parse_type_e(ctx):
    return parse_type_e_internal(ctx, rbp=0)
def parse_type_e_internal(ctx, rbp=0):
    left = nud_type_e(ctx)
    if isinstance(left, ParseTree):
        left.isExpr = True
        left.isNud = True
    while ctx.tokens.current() and rbp < get_infix_binding_power_type_e(ctx.tokens.current().id):
        left = led_type_e(left, ctx)
    if left:
        left.isExpr = True
    return left
def nud_type_e(ctx):
    tree = ParseTree(NonTerminal(66, 'type_e'))
    current = ctx.tokens.current()
    ctx.nonterminal = "type_e"
    if not current:
        return tree
    if current.id in rule_first[109]:
        # $type_e = :type <=> :lsquare $_gen31 :rsquare -> Type( name=$0, subtype=$2 )
        ctx.rule = rules[109]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 47))
    elif current.id in rule_first[110]:
        # $type_e = :type
        ctx.rule = rules[110]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 47))
    return tree
def led_type_e(left, ctx):
    tree = ParseTree(NonTerminal(66, 'type_e'))
    current = ctx.tokens.current()
    ctx.nonterminal = "type_e"
    if current.id == 7: # :lsquare
        # $type_e = :type <=> :lsquare $_gen31 :rsquare -> Type( name=$0, subtype=$2 )
        ctx.rule = rules[109]
        ast_parameters = OrderedDict([
            ('name', 0),
            ('subtype', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Type', ast_parameters)
        tree.add(left)
        tree.add(expect(ctx, 7)) # :lsquare
        tree.add(parse__gen31(ctx))
        tree.add(expect(ctx, 31)) # :rsquare
    return tree
# END definitions for expression parser: type_e
# START definitions for expression parser: e
infix_binding_power_e = {
    16: 2000, # $e = $e :double_pipe $e -> LogicalOr( lhs=$0, rhs=$2 )
    2: 3000, # $e = $e :double_ampersand $e -> LogicalAnd( lhs=$0, rhs=$2 )
    0: 4000, # $e = $e :double_equal $e -> Equals( lhs=$0, rhs=$2 )
    36: 4000, # $e = $e :not_equal $e -> NotEquals( lhs=$0, rhs=$2 )
    37: 5000, # $e = $e :lt $e -> LessThan( lhs=$0, rhs=$2 )
    35: 5000, # $e = $e :lteq $e -> LessThanOrEqual( lhs=$0, rhs=$2 )
    41: 5000, # $e = $e :gt $e -> GreaterThan( lhs=$0, rhs=$2 )
    11: 5000, # $e = $e :gteq $e -> GreaterThanOrEqual( lhs=$0, rhs=$2 )
    32: 6000, # $e = $e :plus $e -> Add( lhs=$0, rhs=$2 )
    51: 6000, # $e = $e :dash $e -> Subtract( lhs=$0, rhs=$2 )
    23: 7000, # $e = $e :asterisk $e -> Multiply( lhs=$0, rhs=$2 )
    4: 7000, # $e = $e :slash $e -> Divide( lhs=$0, rhs=$2 )
    49: 7000, # $e = $e :percent $e -> Remainder( lhs=$0, rhs=$2 )
    33: 9000, # $e = :identifier <=> :lparen list(nt=$e, sep=:comma, min=0, sep_terminates=False) :rparen -> FunctionCall( name=$0, params=$2 )
    7: 10000, # $e = :identifier <=> :lsquare $e :rsquare -> ArrayIndex( lhs=$0, rhs=$2 )
    46: 11000, # $e = :identifier <=> :dot :identifier -> MemberAccess( lhs=$0, rhs=$2 )
}
prefix_binding_power_e = {
    21: 8000, # $e = :not $e -> LogicalNot( expression=$1 )
    32: 8000, # $e = :plus $e -> UnaryPlus( expression=$1 )
    51: 8000, # $e = :dash $e -> UnaryNegation( expression=$1 )
}
def get_infix_binding_power_e(terminal_id):
    try:
        return infix_binding_power_e[terminal_id]
    except:
        return 0
def get_prefix_binding_power_e(terminal_id):
    try:
        return prefix_binding_power_e[terminal_id]
    except:
        return 0
def parse_e(ctx):
    return parse_e_internal(ctx, rbp=0)
def parse_e_internal(ctx, rbp=0):
    left = nud_e(ctx)
    if isinstance(left, ParseTree):
        left.isExpr = True
        left.isNud = True
    while ctx.tokens.current() and rbp < get_infix_binding_power_e(ctx.tokens.current().id):
        left = led_e(left, ctx)
    if left:
        left.isExpr = True
    return left
def nud_e(ctx):
    tree = ParseTree(NonTerminal(128, 'e'))
    current = ctx.tokens.current()
    ctx.nonterminal = "e"
    if not current:
        return tree
    elif current.id in rule_first[124]:
        # $e = :not $e -> LogicalNot( expression=$1 )
        ctx.rule = rules[124]
        ast_parameters = OrderedDict([
            ('expression', 1),
        ])
        tree.astTransform = AstTransformNodeCreator('LogicalNot', ast_parameters)
        tree.nudMorphemeCount = 2
        tree.add(expect(ctx, 21))
        tree.add(parse_e_internal(ctx, get_prefix_binding_power_e(21)))
        tree.isPrefix = True
    elif current.id in rule_first[125]:
        # $e = :plus $e -> UnaryPlus( expression=$1 )
        ctx.rule = rules[125]
        ast_parameters = OrderedDict([
            ('expression', 1),
        ])
        tree.astTransform = AstTransformNodeCreator('UnaryPlus', ast_parameters)
        tree.nudMorphemeCount = 2
        tree.add(expect(ctx, 32))
        tree.add(parse_e_internal(ctx, get_prefix_binding_power_e(32)))
        tree.isPrefix = True
    elif current.id in rule_first[126]:
        # $e = :dash $e -> UnaryNegation( expression=$1 )
        ctx.rule = rules[126]
        ast_parameters = OrderedDict([
            ('expression', 1),
        ])
        tree.astTransform = AstTransformNodeCreator('UnaryNegation', ast_parameters)
        tree.nudMorphemeCount = 2
        tree.add(expect(ctx, 51))
        tree.add(parse_e_internal(ctx, get_prefix_binding_power_e(51)))
        tree.isPrefix = True
    elif current.id in rule_first[131]:
        # $e = :identifier <=> :lparen $_gen33 :rparen -> FunctionCall( name=$0, params=$2 )
        ctx.rule = rules[131]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 13))
    elif current.id in rule_first[132]:
        # $e = :identifier <=> :lsquare $e :rsquare -> ArrayIndex( lhs=$0, rhs=$2 )
        ctx.rule = rules[132]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 13))
    elif current.id in rule_first[133]:
        # $e = :identifier <=> :dot :identifier -> MemberAccess( lhs=$0, rhs=$2 )
        ctx.rule = rules[133]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 13))
    elif current.id in rule_first[138]:
        # $e = :object :lbrace $_gen35 :rbrace -> ObjectLiteral( map=$2 )
        ctx.rule = rules[138]
        ast_parameters = OrderedDict([
            ('map', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('ObjectLiteral', ast_parameters)
        tree.nudMorphemeCount = 4
        tree.add(expect(ctx, 18))
        tree.add(expect(ctx, 42))
        tree.add(parse__gen35(ctx))
        tree.add(expect(ctx, 54))
    elif current.id in rule_first[139]:
        # $e = :lparen $e :rparen -> $1
        ctx.rule = rules[139]
        tree.astTransform = AstTransformSubstitution(1)
        tree.nudMorphemeCount = 3
        tree.add(expect(ctx, 33))
        tree.add(parse_e(ctx))
        tree.add(expect(ctx, 40))
    elif current.id in rule_first[140]:
        # $e = :string
        ctx.rule = rules[140]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 45))
    elif current.id in rule_first[141]:
        # $e = :identifier
        ctx.rule = rules[141]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 13))
    elif current.id in rule_first[142]:
        # $e = :boolean
        ctx.rule = rules[142]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 1))
    elif current.id in rule_first[143]:
        # $e = :integer
        ctx.rule = rules[143]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 12))
    elif current.id in rule_first[144]:
        # $e = :float
        ctx.rule = rules[144]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 55))
    elif current.id in rule_first[145]:
        # $e = :dquote_string
        ctx.rule = rules[145]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 56))
    elif current.id in rule_first[146]:
        # $e = :squote_string
        ctx.rule = rules[146]
        tree.astTransform = AstTransformSubstitution(0)
        tree.nudMorphemeCount = 1
        tree.add(expect(ctx, 19))
    return tree
def led_e(left, ctx):
    tree = ParseTree(NonTerminal(128, 'e'))
    current = ctx.tokens.current()
    ctx.nonterminal = "e"
    if current.id == 16: # :double_pipe
        # $e = $e :double_pipe $e -> LogicalOr( lhs=$0, rhs=$2 )
        ctx.rule = rules[111]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('LogicalOr', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 16)) # :double_pipe
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(16) - modifier))
    if current.id == 2: # :double_ampersand
        # $e = $e :double_ampersand $e -> LogicalAnd( lhs=$0, rhs=$2 )
        ctx.rule = rules[112]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('LogicalAnd', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 2)) # :double_ampersand
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(2) - modifier))
    if current.id == 0: # :double_equal
        # $e = $e :double_equal $e -> Equals( lhs=$0, rhs=$2 )
        ctx.rule = rules[113]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Equals', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 0)) # :double_equal
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(0) - modifier))
    if current.id == 36: # :not_equal
        # $e = $e :not_equal $e -> NotEquals( lhs=$0, rhs=$2 )
        ctx.rule = rules[114]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('NotEquals', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 36)) # :not_equal
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(36) - modifier))
    if current.id == 37: # :lt
        # $e = $e :lt $e -> LessThan( lhs=$0, rhs=$2 )
        ctx.rule = rules[115]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('LessThan', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 37)) # :lt
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(37) - modifier))
    if current.id == 35: # :lteq
        # $e = $e :lteq $e -> LessThanOrEqual( lhs=$0, rhs=$2 )
        ctx.rule = rules[116]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('LessThanOrEqual', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 35)) # :lteq
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(35) - modifier))
    if current.id == 41: # :gt
        # $e = $e :gt $e -> GreaterThan( lhs=$0, rhs=$2 )
        ctx.rule = rules[117]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('GreaterThan', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 41)) # :gt
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(41) - modifier))
    if current.id == 11: # :gteq
        # $e = $e :gteq $e -> GreaterThanOrEqual( lhs=$0, rhs=$2 )
        ctx.rule = rules[118]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('GreaterThanOrEqual', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 11)) # :gteq
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(11) - modifier))
    if current.id == 32: # :plus
        # $e = $e :plus $e -> Add( lhs=$0, rhs=$2 )
        ctx.rule = rules[119]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Add', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 32)) # :plus
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(32) - modifier))
    if current.id == 51: # :dash
        # $e = $e :dash $e -> Subtract( lhs=$0, rhs=$2 )
        ctx.rule = rules[120]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Subtract', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 51)) # :dash
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(51) - modifier))
    if current.id == 23: # :asterisk
        # $e = $e :asterisk $e -> Multiply( lhs=$0, rhs=$2 )
        ctx.rule = rules[121]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Multiply', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 23)) # :asterisk
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(23) - modifier))
    if current.id == 4: # :slash
        # $e = $e :slash $e -> Divide( lhs=$0, rhs=$2 )
        ctx.rule = rules[122]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Divide', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 4)) # :slash
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(4) - modifier))
    if current.id == 49: # :percent
        # $e = $e :percent $e -> Remainder( lhs=$0, rhs=$2 )
        ctx.rule = rules[123]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Remainder', ast_parameters)
        tree.isExprNud = True
        tree.add(left)
        tree.add(expect(ctx, 49)) # :percent
        modifier = 0
        tree.isInfix = True
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(49) - modifier))
    if current.id == 33: # :lparen
        # $e = :identifier <=> :lparen $_gen33 :rparen -> FunctionCall( name=$0, params=$2 )
        ctx.rule = rules[131]
        ast_parameters = OrderedDict([
            ('name', 0),
            ('params', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('FunctionCall', ast_parameters)
        tree.add(left)
        tree.add(expect(ctx, 33)) # :lparen
        tree.add(parse__gen33(ctx))
        tree.add(expect(ctx, 40)) # :rparen
    if current.id == 7: # :lsquare
        # $e = :identifier <=> :lsquare $e :rsquare -> ArrayIndex( lhs=$0, rhs=$2 )
        ctx.rule = rules[132]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('ArrayIndex', ast_parameters)
        tree.add(left)
        tree.add(expect(ctx, 7)) # :lsquare
        modifier = 0
        tree.add(parse_e_internal(ctx, get_infix_binding_power_e(7) - modifier))
        tree.add(expect(ctx, 31)) # :rsquare
    if current.id == 46: # :dot
        # $e = :identifier <=> :dot :identifier -> MemberAccess( lhs=$0, rhs=$2 )
        ctx.rule = rules[133]
        ast_parameters = OrderedDict([
            ('lhs', 0),
            ('rhs', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('MemberAccess', ast_parameters)
        tree.add(left)
        tree.add(expect(ctx, 46)) # :dot
        tree.add(expect(ctx, 13)) # :identifier
    return tree
# END definitions for expression parser: e
def parse__gen21(ctx):
    current = ctx.tokens.current()
    rule = table[0][current.id] if current else -1
    tree = ParseTree(NonTerminal(58, '_gen21'))
    ctx.nonterminal = "_gen21"
    tree.list = True
    if current != None and current.id in nonterminal_follow[58] and current.id not in nonterminal_first[58]:
        return tree
    if current == None:
        return tree
    if rule == 67: # $_gen21 = $wf_body_element $_gen21
        ctx.rule = rules[67]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_wf_body_element(ctx)
        tree.add(subtree)
        subtree = parse__gen21(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen33(ctx):
    current = ctx.tokens.current()
    rule = table[1][current.id] if current else -1
    tree = ParseTree(NonTerminal(59, '_gen33'))
    ctx.nonterminal = "_gen33"
    tree.list = True
    if current != None and current.id in nonterminal_follow[59] and current.id not in nonterminal_first[59]:
        return tree
    if current == None:
        return tree
    if rule == 127: # $_gen33 = $e $_gen34
        ctx.rule = rules[127]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_e(ctx)
        tree.add(subtree)
        subtree = parse__gen34(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_import_namespace(ctx):
    current = ctx.tokens.current()
    rule = table[2][current.id] if current else -1
    tree = ParseTree(NonTerminal(60, 'import_namespace'))
    ctx.nonterminal = "import_namespace"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 14: # $import_namespace = :as :identifier -> $1
        ctx.rule = rules[14]
        tree.astTransform = AstTransformSubstitution(1)
        t = expect(ctx, 48) # :as
        tree.add(t)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[60] if x >=0],
      rules[14]
    )
def parse__gen29(ctx):
    current = ctx.tokens.current()
    rule = table[3][current.id] if current else -1
    tree = ParseTree(NonTerminal(61, '_gen29'))
    ctx.nonterminal = "_gen29"
    tree.list = True
    if current != None and current.id in nonterminal_follow[61] and current.id not in nonterminal_first[61]:
        return tree
    if current == None:
        return tree
    if rule == 91: # $_gen29 = :comma $mapping $_gen29
        ctx.rule = rules[91]
        tree.astTransform = AstTransformSubstitution(0)
        t = expect(ctx, 9) # :comma
        tree.add(t)
        tree.listSeparator = t
        subtree = parse_mapping(ctx)
        tree.add(subtree)
        subtree = parse__gen29(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen10(ctx):
    current = ctx.tokens.current()
    rule = table[4][current.id] if current else -1
    tree = ParseTree(NonTerminal(62, '_gen10'))
    ctx.nonterminal = "_gen10"
    tree.list = True
    if current != None and current.id in nonterminal_follow[62] and current.id not in nonterminal_first[62]:
        return tree
    if current == None:
        return tree
    if rule == 30: # $_gen10 = $command_part $_gen10
        ctx.rule = rules[30]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_command_part(ctx)
        tree.add(subtree)
        subtree = parse__gen10(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen22(ctx):
    current = ctx.tokens.current()
    rule = table[5][current.id] if current else -1
    tree = ParseTree(NonTerminal(63, '_gen22'))
    ctx.nonterminal = "_gen22"
    tree.list = False
    if current != None and current.id in nonterminal_follow[63] and current.id not in nonterminal_first[63]:
        return tree
    if current == None:
        return tree
    if rule == 76: # $_gen22 = $alias
        ctx.rule = rules[76]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_alias(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_mapping(ctx):
    current = ctx.tokens.current()
    rule = table[6][current.id] if current else -1
    tree = ParseTree(NonTerminal(64, 'mapping'))
    ctx.nonterminal = "mapping"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 95: # $mapping = :identifier :equal $e -> IOMapping( key=$0, value=$2 )
        ctx.rule = rules[95]
        ast_parameters = OrderedDict([
            ('key', 0),
            ('value', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('IOMapping', ast_parameters)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        t = expect(ctx, 15) # :equal
        tree.add(t)
        subtree = parse_e(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[64] if x >=0],
      rules[95]
    )
def parse_sections(ctx):
    current = ctx.tokens.current()
    rule = table[7][current.id] if current else -1
    tree = ParseTree(NonTerminal(65, 'sections'))
    ctx.nonterminal = "sections"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 24: # $sections = $command
        ctx.rule = rules[24]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_command(ctx)
        tree.add(subtree)
        return tree
    elif rule == 25: # $sections = $outputs
        ctx.rule = rules[25]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_outputs(ctx)
        tree.add(subtree)
        return tree
    elif rule == 26: # $sections = $runtime
        ctx.rule = rules[26]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_runtime(ctx)
        tree.add(subtree)
        return tree
    elif rule == 27: # $sections = $parameter_meta
        ctx.rule = rules[27]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_parameter_meta(ctx)
        tree.add(subtree)
        return tree
    elif rule == 28: # $sections = $meta
        ctx.rule = rules[28]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_meta(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[65] if x >=0],
      rules[28]
    )
def parse__gen11(ctx):
    current = ctx.tokens.current()
    rule = table[9][current.id] if current else -1
    tree = ParseTree(NonTerminal(67, '_gen11'))
    ctx.nonterminal = "_gen11"
    tree.list = True
    if current != None and current.id in nonterminal_follow[67] and current.id not in nonterminal_first[67]:
        return tree
    if current == None:
        return tree
    if rule == 36: # $_gen11 = $cmd_param_kv $_gen12
        ctx.rule = rules[36]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_cmd_param_kv(ctx)
        tree.add(subtree)
        subtree = parse__gen12(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen6(ctx):
    current = ctx.tokens.current()
    rule = table[10][current.id] if current else -1
    tree = ParseTree(NonTerminal(68, '_gen6'))
    ctx.nonterminal = "_gen6"
    tree.list = True
    if current != None and current.id in nonterminal_follow[68] and current.id not in nonterminal_first[68]:
        return tree
    if current == None:
        return tree
    if rule == 16: # $_gen6 = $declarations $_gen6
        ctx.rule = rules[16]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_declarations(ctx)
        tree.add(subtree)
        subtree = parse__gen6(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen8(ctx):
    current = ctx.tokens.current()
    rule = table[11][current.id] if current else -1
    tree = ParseTree(NonTerminal(69, '_gen8'))
    ctx.nonterminal = "_gen8"
    tree.list = True
    if current != None and current.id in nonterminal_follow[69] and current.id not in nonterminal_first[69]:
        return tree
    if current == None:
        return tree
    if rule == 20: # $_gen8 = $sections $_gen8
        ctx.rule = rules[20]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_sections(ctx)
        tree.add(subtree)
        subtree = parse__gen8(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen7(ctx):
    current = ctx.tokens.current()
    rule = table[12][current.id] if current else -1
    tree = ParseTree(NonTerminal(70, '_gen7'))
    ctx.nonterminal = "_gen7"
    tree.list = True
    if current != None and current.id in nonterminal_follow[70] and current.id not in nonterminal_first[70]:
        return tree
    if current == None:
        return tree
    if rule == 19: # $_gen7 = $sections $_gen8
        ctx.rule = rules[19]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_sections(ctx)
        tree.add(subtree)
        subtree = parse__gen8(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen2(ctx):
    current = ctx.tokens.current()
    rule = table[13][current.id] if current else -1
    tree = ParseTree(NonTerminal(71, '_gen2'))
    ctx.nonterminal = "_gen2"
    tree.list = True
    if current != None and current.id in nonterminal_follow[71] and current.id not in nonterminal_first[71]:
        return tree
    if current == None:
        return tree
    if rule == 4: # $_gen2 = $workflow_or_task $_gen3
        ctx.rule = rules[4]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_workflow_or_task(ctx)
        tree.add(subtree)
        subtree = parse__gen3(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen4(ctx):
    current = ctx.tokens.current()
    rule = table[14][current.id] if current else -1
    tree = ParseTree(NonTerminal(72, '_gen4'))
    ctx.nonterminal = "_gen4"
    tree.list = False
    if current != None and current.id in nonterminal_follow[72] and current.id not in nonterminal_first[72]:
        return tree
    if current == None:
        return tree
    if rule == 11: # $_gen4 = $import_namespace
        ctx.rule = rules[11]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_import_namespace(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_outputs(ctx):
    current = ctx.tokens.current()
    rule = table[15][current.id] if current else -1
    tree = ParseTree(NonTerminal(73, 'outputs'))
    ctx.nonterminal = "outputs"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 55: # $outputs = :output :lbrace $_gen16 :rbrace -> Outputs( attributes=$2 )
        ctx.rule = rules[55]
        ast_parameters = OrderedDict([
            ('attributes', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Outputs', ast_parameters)
        t = expect(ctx, 8) # :output
        tree.add(t)
        t = expect(ctx, 42) # :lbrace
        tree.add(t)
        subtree = parse__gen16(ctx)
        tree.add(subtree)
        t = expect(ctx, 54) # :rbrace
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[73] if x >=0],
      rules[55]
    )
def parse__gen14(ctx):
    current = ctx.tokens.current()
    rule = table[16][current.id] if current else -1
    tree = ParseTree(NonTerminal(74, '_gen14'))
    ctx.nonterminal = "_gen14"
    tree.list = False
    if current != None and current.id in nonterminal_follow[74] and current.id not in nonterminal_first[74]:
        return tree
    if current == None:
        return tree
    if rule == 42: # $_gen14 = $type_e
        ctx.rule = rules[42]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_type_e(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen26(ctx):
    current = ctx.tokens.current()
    rule = table[17][current.id] if current else -1
    tree = ParseTree(NonTerminal(75, '_gen26'))
    ctx.nonterminal = "_gen26"
    tree.list = True
    if current != None and current.id in nonterminal_follow[75] and current.id not in nonterminal_first[75]:
        return tree
    if current == None:
        return tree
    if rule == 85: # $_gen26 = $call_input $_gen27
        ctx.rule = rules[85]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_call_input(ctx)
        tree.add(subtree)
        subtree = parse__gen27(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen35(ctx):
    current = ctx.tokens.current()
    rule = table[18][current.id] if current else -1
    tree = ParseTree(NonTerminal(76, '_gen35'))
    ctx.nonterminal = "_gen35"
    tree.list = True
    if current != None and current.id in nonterminal_follow[76] and current.id not in nonterminal_first[76]:
        return tree
    if current == None:
        return tree
    if rule == 134: # $_gen35 = $object_kv $_gen36
        ctx.rule = rules[134]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_object_kv(ctx)
        tree.add(subtree)
        subtree = parse__gen36(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen13(ctx):
    current = ctx.tokens.current()
    rule = table[19][current.id] if current else -1
    tree = ParseTree(NonTerminal(77, '_gen13'))
    ctx.nonterminal = "_gen13"
    tree.list = False
    if current != None and current.id in nonterminal_follow[77] and current.id not in nonterminal_first[77]:
        return tree
    if current == None:
        return tree
    if rule == 40: # $_gen13 = :string
        ctx.rule = rules[40]
        tree.astTransform = AstTransformSubstitution(0)
        t = expect(ctx, 45) # :string
        tree.add(t)
        return tree
    return tree
def parse_cmd_param_kv(ctx):
    current = ctx.tokens.current()
    rule = table[20][current.id] if current else -1
    tree = ParseTree(NonTerminal(78, 'cmd_param_kv'))
    ctx.nonterminal = "cmd_param_kv"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 47: # $cmd_param_kv = :cmd_attr_hint :identifier :equal $e -> CommandParameterAttr( key=$1, value=$3 )
        ctx.rule = rules[47]
        ast_parameters = OrderedDict([
            ('key', 1),
            ('value', 3),
        ])
        tree.astTransform = AstTransformNodeCreator('CommandParameterAttr', ast_parameters)
        t = expect(ctx, 43) # :cmd_attr_hint
        tree.add(t)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        t = expect(ctx, 15) # :equal
        tree.add(t)
        subtree = parse_e(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[78] if x >=0],
      rules[47]
    )
def parse__gen31(ctx):
    current = ctx.tokens.current()
    rule = table[21][current.id] if current else -1
    tree = ParseTree(NonTerminal(79, '_gen31'))
    ctx.nonterminal = "_gen31"
    tree.list = True
    if current != None and current.id in nonterminal_follow[79] and current.id not in nonterminal_first[79]:
        return tree
    if current == None:
        return tree
    if rule == 105: # $_gen31 = $type_e $_gen32
        ctx.rule = rules[105]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_type_e(ctx)
        tree.add(subtree)
        subtree = parse__gen32(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_meta(ctx):
    current = ctx.tokens.current()
    rule = table[22][current.id] if current else -1
    tree = ParseTree(NonTerminal(80, 'meta'))
    ctx.nonterminal = "meta"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 59: # $meta = :meta $map -> Meta( map=$1 )
        ctx.rule = rules[59]
        ast_parameters = OrderedDict([
            ('map', 1),
        ])
        tree.astTransform = AstTransformNodeCreator('Meta', ast_parameters)
        t = expect(ctx, 38) # :meta
        tree.add(t)
        subtree = parse_map(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[80] if x >=0],
      rules[59]
    )
def parse_output_kv(ctx):
    current = ctx.tokens.current()
    rule = table[23][current.id] if current else -1
    tree = ParseTree(NonTerminal(81, 'output_kv'))
    ctx.nonterminal = "output_kv"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 56: # $output_kv = $type_e :identifier :equal $e -> Output( type=$0, var=$1, expression=$3 )
        ctx.rule = rules[56]
        ast_parameters = OrderedDict([
            ('type', 0),
            ('var', 1),
            ('expression', 3),
        ])
        tree.astTransform = AstTransformNodeCreator('Output', ast_parameters)
        subtree = parse_type_e(ctx)
        tree.add(subtree)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        t = expect(ctx, 15) # :equal
        tree.add(t)
        subtree = parse_e(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[81] if x >=0],
      rules[56]
    )
def parse_workflow(ctx):
    current = ctx.tokens.current()
    rule = table[24][current.id] if current else -1
    tree = ParseTree(NonTerminal(82, 'workflow'))
    ctx.nonterminal = "workflow"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 70: # $workflow = :workflow :identifier :lbrace $_gen20 :rbrace -> Workflow( name=$1, body=$3 )
        ctx.rule = rules[70]
        ast_parameters = OrderedDict([
            ('name', 1),
            ('body', 3),
        ])
        tree.astTransform = AstTransformNodeCreator('Workflow', ast_parameters)
        t = expect(ctx, 50) # :workflow
        tree.add(t)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        t = expect(ctx, 42) # :lbrace
        tree.add(t)
        subtree = parse__gen20(ctx)
        tree.add(subtree)
        t = expect(ctx, 54) # :rbrace
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[82] if x >=0],
      rules[70]
    )
def parse_command_part(ctx):
    current = ctx.tokens.current()
    rule = table[25][current.id] if current else -1
    tree = ParseTree(NonTerminal(83, 'command_part'))
    ctx.nonterminal = "command_part"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 34: # $command_part = :cmd_part
        ctx.rule = rules[34]
        tree.astTransform = AstTransformSubstitution(0)
        t = expect(ctx, 26) # :cmd_part
        tree.add(t)
        return tree
    elif rule == 35: # $command_part = $cmd_param
        ctx.rule = rules[35]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_cmd_param(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[83] if x >=0],
      rules[35]
    )
def parse__gen9(ctx):
    current = ctx.tokens.current()
    rule = table[26][current.id] if current else -1
    tree = ParseTree(NonTerminal(84, '_gen9'))
    ctx.nonterminal = "_gen9"
    tree.list = True
    if current != None and current.id in nonterminal_follow[84] and current.id not in nonterminal_first[84]:
        return tree
    if current == None:
        return tree
    if rule == 29: # $_gen9 = $command_part $_gen10
        ctx.rule = rules[29]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_command_part(ctx)
        tree.add(subtree)
        subtree = parse__gen10(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_wf_body_element(ctx):
    current = ctx.tokens.current()
    rule = table[27][current.id] if current else -1
    tree = ParseTree(NonTerminal(85, 'wf_body_element'))
    ctx.nonterminal = "wf_body_element"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 71: # $wf_body_element = $call
        ctx.rule = rules[71]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_call(ctx)
        tree.add(subtree)
        return tree
    elif rule == 72: # $wf_body_element = $declaration
        ctx.rule = rules[72]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_declaration(ctx)
        tree.add(subtree)
        return tree
    elif rule == 73: # $wf_body_element = $while_loop
        ctx.rule = rules[73]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_while_loop(ctx)
        tree.add(subtree)
        return tree
    elif rule == 74: # $wf_body_element = $if_stmt
        ctx.rule = rules[74]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_if_stmt(ctx)
        tree.add(subtree)
        return tree
    elif rule == 75: # $wf_body_element = $scatter
        ctx.rule = rules[75]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_scatter(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[85] if x >=0],
      rules[75]
    )
def parse_call(ctx):
    current = ctx.tokens.current()
    rule = table[28][current.id] if current else -1
    tree = ParseTree(NonTerminal(86, 'call'))
    ctx.nonterminal = "call"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 80: # $call = :call :ns_identifier $_gen22 $_gen23 -> Call( task=$1, alias=$2, body=$3 )
        ctx.rule = rules[80]
        ast_parameters = OrderedDict([
            ('task', 1),
            ('alias', 2),
            ('body', 3),
        ])
        tree.astTransform = AstTransformNodeCreator('Call', ast_parameters)
        t = expect(ctx, 28) # :call
        tree.add(t)
        t = expect(ctx, 29) # :ns_identifier
        tree.add(t)
        subtree = parse__gen22(ctx)
        tree.add(subtree)
        subtree = parse__gen23(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[86] if x >=0],
      rules[80]
    )
def parse__gen25(ctx):
    current = ctx.tokens.current()
    rule = table[29][current.id] if current else -1
    tree = ParseTree(NonTerminal(87, '_gen25'))
    ctx.nonterminal = "_gen25"
    tree.list = True
    if current != None and current.id in nonterminal_follow[87] and current.id not in nonterminal_first[87]:
        return tree
    if current == None:
        return tree
    if rule == 82: # $_gen25 = $declaration $_gen25
        ctx.rule = rules[82]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_declaration(ctx)
        tree.add(subtree)
        subtree = parse__gen25(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_import(ctx):
    current = ctx.tokens.current()
    rule = table[30][current.id] if current else -1
    tree = ParseTree(NonTerminal(88, 'import'))
    ctx.nonterminal = "import"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 13: # $import = :import :string $_gen4 -> Import( uri=$1, namespace=$2 )
        ctx.rule = rules[13]
        ast_parameters = OrderedDict([
            ('uri', 1),
            ('namespace', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Import', ast_parameters)
        t = expect(ctx, 27) # :import
        tree.add(t)
        t = expect(ctx, 45) # :string
        tree.add(t)
        subtree = parse__gen4(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[88] if x >=0],
      rules[13]
    )
def parse__gen5(ctx):
    current = ctx.tokens.current()
    rule = table[31][current.id] if current else -1
    tree = ParseTree(NonTerminal(89, '_gen5'))
    ctx.nonterminal = "_gen5"
    tree.list = True
    if current != None and current.id in nonterminal_follow[89] and current.id not in nonterminal_first[89]:
        return tree
    if current == None:
        return tree
    if rule == 15: # $_gen5 = $declarations $_gen6
        ctx.rule = rules[15]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_declarations(ctx)
        tree.add(subtree)
        subtree = parse__gen6(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_cmd_param(ctx):
    current = ctx.tokens.current()
    rule = table[32][current.id] if current else -1
    tree = ParseTree(NonTerminal(90, 'cmd_param'))
    ctx.nonterminal = "cmd_param"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 46: # $cmd_param = :cmd_param_start $_gen11 $_gen13 $_gen14 :identifier $_gen15 :cmd_param_end -> CommandParameter( name=$4, type=$3, prefix=$2, attributes=$1, postfix=$5 )
        ctx.rule = rules[46]
        ast_parameters = OrderedDict([
            ('name', 4),
            ('type', 3),
            ('prefix', 2),
            ('attributes', 1),
            ('postfix', 5),
        ])
        tree.astTransform = AstTransformNodeCreator('CommandParameter', ast_parameters)
        t = expect(ctx, 25) # :cmd_param_start
        tree.add(t)
        subtree = parse__gen11(ctx)
        tree.add(subtree)
        subtree = parse__gen13(ctx)
        tree.add(subtree)
        subtree = parse__gen14(ctx)
        tree.add(subtree)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        subtree = parse__gen15(ctx)
        tree.add(subtree)
        t = expect(ctx, 34) # :cmd_param_end
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[90] if x >=0],
      rules[46]
    )
def parse__gen17(ctx):
    current = ctx.tokens.current()
    rule = table[33][current.id] if current else -1
    tree = ParseTree(NonTerminal(91, '_gen17'))
    ctx.nonterminal = "_gen17"
    tree.list = True
    if current != None and current.id in nonterminal_follow[91] and current.id not in nonterminal_first[91]:
        return tree
    if current == None:
        return tree
    if rule == 52: # $_gen17 = $output_kv $_gen17
        ctx.rule = rules[52]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_output_kv(ctx)
        tree.add(subtree)
        subtree = parse__gen17(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen18(ctx):
    current = ctx.tokens.current()
    rule = table[34][current.id] if current else -1
    tree = ParseTree(NonTerminal(92, '_gen18'))
    ctx.nonterminal = "_gen18"
    tree.list = True
    if current != None and current.id in nonterminal_follow[92] and current.id not in nonterminal_first[92]:
        return tree
    if current == None:
        return tree
    if rule == 60: # $_gen18 = $kv $_gen19
        ctx.rule = rules[60]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_kv(ctx)
        tree.add(subtree)
        subtree = parse__gen19(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_workflow_or_task(ctx):
    current = ctx.tokens.current()
    rule = table[35][current.id] if current else -1
    tree = ParseTree(NonTerminal(93, 'workflow_or_task'))
    ctx.nonterminal = "workflow_or_task"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 9: # $workflow_or_task = $workflow
        ctx.rule = rules[9]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_workflow(ctx)
        tree.add(subtree)
        return tree
    elif rule == 10: # $workflow_or_task = $task
        ctx.rule = rules[10]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_task(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[93] if x >=0],
      rules[10]
    )
def parse_scatter(ctx):
    current = ctx.tokens.current()
    rule = table[36][current.id] if current else -1
    tree = ParseTree(NonTerminal(94, 'scatter'))
    ctx.nonterminal = "scatter"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 99: # $scatter = :scatter :lparen :identifier :in $e :rparen :lbrace $_gen20 :rbrace -> Scatter( item=$2, collection=$4, body=$7 )
        ctx.rule = rules[99]
        ast_parameters = OrderedDict([
            ('item', 2),
            ('collection', 4),
            ('body', 7),
        ])
        tree.astTransform = AstTransformNodeCreator('Scatter', ast_parameters)
        t = expect(ctx, 10) # :scatter
        tree.add(t)
        t = expect(ctx, 33) # :lparen
        tree.add(t)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        t = expect(ctx, 17) # :in
        tree.add(t)
        subtree = parse_e(ctx)
        tree.add(subtree)
        t = expect(ctx, 40) # :rparen
        tree.add(t)
        t = expect(ctx, 42) # :lbrace
        tree.add(t)
        subtree = parse__gen20(ctx)
        tree.add(subtree)
        t = expect(ctx, 54) # :rbrace
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[94] if x >=0],
      rules[99]
    )
def parse_postfix_quantifier(ctx):
    current = ctx.tokens.current()
    rule = table[37][current.id] if current else -1
    tree = ParseTree(NonTerminal(95, 'postfix_quantifier'))
    ctx.nonterminal = "postfix_quantifier"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 48: # $postfix_quantifier = :qmark
        ctx.rule = rules[48]
        tree.astTransform = AstTransformSubstitution(0)
        t = expect(ctx, 6) # :qmark
        tree.add(t)
        return tree
    elif rule == 49: # $postfix_quantifier = :plus
        ctx.rule = rules[49]
        tree.astTransform = AstTransformSubstitution(0)
        t = expect(ctx, 32) # :plus
        tree.add(t)
        return tree
    elif rule == 50: # $postfix_quantifier = :asterisk
        ctx.rule = rules[50]
        tree.astTransform = AstTransformSubstitution(0)
        t = expect(ctx, 23) # :asterisk
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[95] if x >=0],
      rules[50]
    )
def parse_call_input(ctx):
    current = ctx.tokens.current()
    rule = table[38][current.id] if current else -1
    tree = ParseTree(NonTerminal(96, 'call_input'))
    ctx.nonterminal = "call_input"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 94: # $call_input = :input :colon $_gen28 -> Inputs( map=$2 )
        ctx.rule = rules[94]
        ast_parameters = OrderedDict([
            ('map', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Inputs', ast_parameters)
        t = expect(ctx, 44) # :input
        tree.add(t)
        t = expect(ctx, 39) # :colon
        tree.add(t)
        subtree = parse__gen28(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[96] if x >=0],
      rules[94]
    )
def parse_document(ctx):
    current = ctx.tokens.current()
    rule = table[39][current.id] if current else -1
    tree = ParseTree(NonTerminal(97, 'document'))
    ctx.nonterminal = "document"
    tree.list = False
    if current != None and current.id in nonterminal_follow[97] and current.id not in nonterminal_first[97]:
        return tree
    if current == None:
        return tree
    if rule == 8: # $document = $_gen0 $_gen2 -> Document( imports=$0, definitions=$1 )
        ctx.rule = rules[8]
        ast_parameters = OrderedDict([
            ('imports', 0),
            ('definitions', 1),
        ])
        tree.astTransform = AstTransformNodeCreator('Document', ast_parameters)
        subtree = parse__gen0(ctx)
        tree.add(subtree)
        subtree = parse__gen2(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_declarations(ctx):
    current = ctx.tokens.current()
    rule = table[40][current.id] if current else -1
    tree = ParseTree(NonTerminal(98, 'declarations'))
    ctx.nonterminal = "declarations"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[98] if x >=0],
      rules[8]
    )
def parse_task(ctx):
    current = ctx.tokens.current()
    rule = table[41][current.id] if current else -1
    tree = ParseTree(NonTerminal(99, 'task'))
    ctx.nonterminal = "task"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 23: # $task = :task :identifier :lbrace $_gen5 $_gen7 :rbrace -> Task( name=$1, declarations=$3, sections=$4 )
        ctx.rule = rules[23]
        ast_parameters = OrderedDict([
            ('name', 1),
            ('declarations', 3),
            ('sections', 4),
        ])
        tree.astTransform = AstTransformNodeCreator('Task', ast_parameters)
        t = expect(ctx, 5) # :task
        tree.add(t)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        t = expect(ctx, 42) # :lbrace
        tree.add(t)
        subtree = parse__gen5(ctx)
        tree.add(subtree)
        subtree = parse__gen7(ctx)
        tree.add(subtree)
        t = expect(ctx, 54) # :rbrace
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[99] if x >=0],
      rules[23]
    )
def parse_command(ctx):
    current = ctx.tokens.current()
    rule = table[42][current.id] if current else -1
    tree = ParseTree(NonTerminal(100, 'command'))
    ctx.nonterminal = "command"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 33: # $command = :raw_command :raw_cmd_start $_gen9 :raw_cmd_end -> RawCommand( parts=$2 )
        ctx.rule = rules[33]
        ast_parameters = OrderedDict([
            ('parts', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('RawCommand', ast_parameters)
        t = expect(ctx, 57) # :raw_command
        tree.add(t)
        t = expect(ctx, 30) # :raw_cmd_start
        tree.add(t)
        subtree = parse__gen9(ctx)
        tree.add(subtree)
        t = expect(ctx, 52) # :raw_cmd_end
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[100] if x >=0],
      rules[33]
    )
def parse__gen19(ctx):
    current = ctx.tokens.current()
    rule = table[43][current.id] if current else -1
    tree = ParseTree(NonTerminal(101, '_gen19'))
    ctx.nonterminal = "_gen19"
    tree.list = True
    if current != None and current.id in nonterminal_follow[101] and current.id not in nonterminal_first[101]:
        return tree
    if current == None:
        return tree
    if rule == 61: # $_gen19 = $kv $_gen19
        ctx.rule = rules[61]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_kv(ctx)
        tree.add(subtree)
        subtree = parse__gen19(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen15(ctx):
    current = ctx.tokens.current()
    rule = table[44][current.id] if current else -1
    tree = ParseTree(NonTerminal(102, '_gen15'))
    ctx.nonterminal = "_gen15"
    tree.list = False
    if current != None and current.id in nonterminal_follow[102] and current.id not in nonterminal_first[102]:
        return tree
    if current == None:
        return tree
    if rule == 44: # $_gen15 = $postfix_quantifier
        ctx.rule = rules[44]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_postfix_quantifier(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen16(ctx):
    current = ctx.tokens.current()
    rule = table[45][current.id] if current else -1
    tree = ParseTree(NonTerminal(103, '_gen16'))
    ctx.nonterminal = "_gen16"
    tree.list = True
    if current != None and current.id in nonterminal_follow[103] and current.id not in nonterminal_first[103]:
        return tree
    if current == None:
        return tree
    if rule == 51: # $_gen16 = $output_kv $_gen17
        ctx.rule = rules[51]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_output_kv(ctx)
        tree.add(subtree)
        subtree = parse__gen17(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_while_loop(ctx):
    current = ctx.tokens.current()
    rule = table[46][current.id] if current else -1
    tree = ParseTree(NonTerminal(104, 'while_loop'))
    ctx.nonterminal = "while_loop"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 97: # $while_loop = :while :lparen $e :rparen :lbrace $_gen20 :rbrace -> WhileLoop( expression=$2, body=$5 )
        ctx.rule = rules[97]
        ast_parameters = OrderedDict([
            ('expression', 2),
            ('body', 5),
        ])
        tree.astTransform = AstTransformNodeCreator('WhileLoop', ast_parameters)
        t = expect(ctx, 24) # :while
        tree.add(t)
        t = expect(ctx, 33) # :lparen
        tree.add(t)
        subtree = parse_e(ctx)
        tree.add(subtree)
        t = expect(ctx, 40) # :rparen
        tree.add(t)
        t = expect(ctx, 42) # :lbrace
        tree.add(t)
        subtree = parse__gen20(ctx)
        tree.add(subtree)
        t = expect(ctx, 54) # :rbrace
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[104] if x >=0],
      rules[97]
    )
def parse_if_stmt(ctx):
    current = ctx.tokens.current()
    rule = table[47][current.id] if current else -1
    tree = ParseTree(NonTerminal(105, 'if_stmt'))
    ctx.nonterminal = "if_stmt"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 98: # $if_stmt = :if :lparen $e :rparen :lbrace $_gen20 :rbrace -> If( expression=$2, body=$5 )
        ctx.rule = rules[98]
        ast_parameters = OrderedDict([
            ('expression', 2),
            ('body', 5),
        ])
        tree.astTransform = AstTransformNodeCreator('If', ast_parameters)
        t = expect(ctx, 3) # :if
        tree.add(t)
        t = expect(ctx, 33) # :lparen
        tree.add(t)
        subtree = parse_e(ctx)
        tree.add(subtree)
        t = expect(ctx, 40) # :rparen
        tree.add(t)
        t = expect(ctx, 42) # :lbrace
        tree.add(t)
        subtree = parse__gen20(ctx)
        tree.add(subtree)
        t = expect(ctx, 54) # :rbrace
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[105] if x >=0],
      rules[98]
    )
def parse_call_body(ctx):
    current = ctx.tokens.current()
    rule = table[48][current.id] if current else -1
    tree = ParseTree(NonTerminal(106, 'call_body'))
    ctx.nonterminal = "call_body"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 89: # $call_body = :lbrace $_gen24 $_gen26 :rbrace -> CallBody( declarations=$1, io=$2 )
        ctx.rule = rules[89]
        ast_parameters = OrderedDict([
            ('declarations', 1),
            ('io', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('CallBody', ast_parameters)
        t = expect(ctx, 42) # :lbrace
        tree.add(t)
        subtree = parse__gen24(ctx)
        tree.add(subtree)
        subtree = parse__gen26(ctx)
        tree.add(subtree)
        t = expect(ctx, 54) # :rbrace
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[106] if x >=0],
      rules[89]
    )
def parse__gen23(ctx):
    current = ctx.tokens.current()
    rule = table[49][current.id] if current else -1
    tree = ParseTree(NonTerminal(107, '_gen23'))
    ctx.nonterminal = "_gen23"
    tree.list = False
    if current != None and current.id in nonterminal_follow[107] and current.id not in nonterminal_first[107]:
        return tree
    if current == None:
        return tree
    if rule == 78: # $_gen23 = $call_body
        ctx.rule = rules[78]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_call_body(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_object_kv(ctx):
    current = ctx.tokens.current()
    rule = table[50][current.id] if current else -1
    tree = ParseTree(NonTerminal(108, 'object_kv'))
    ctx.nonterminal = "object_kv"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 104: # $object_kv = :identifier :colon $e -> ObjectKV( key=$0, value=$2 )
        ctx.rule = rules[104]
        ast_parameters = OrderedDict([
            ('key', 0),
            ('value', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('ObjectKV', ast_parameters)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        t = expect(ctx, 39) # :colon
        tree.add(t)
        subtree = parse_e(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[108] if x >=0],
      rules[104]
    )
def parse__gen24(ctx):
    current = ctx.tokens.current()
    rule = table[51][current.id] if current else -1
    tree = ParseTree(NonTerminal(109, '_gen24'))
    ctx.nonterminal = "_gen24"
    tree.list = True
    if current != None and current.id in nonterminal_follow[109] and current.id not in nonterminal_first[109]:
        return tree
    if current == None:
        return tree
    if rule == 81: # $_gen24 = $declaration $_gen25
        ctx.rule = rules[81]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_declaration(ctx)
        tree.add(subtree)
        subtree = parse__gen25(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_setter(ctx):
    current = ctx.tokens.current()
    rule = table[52][current.id] if current else -1
    tree = ParseTree(NonTerminal(110, 'setter'))
    ctx.nonterminal = "setter"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 103: # $setter = :equal $e -> $1
        ctx.rule = rules[103]
        tree.astTransform = AstTransformSubstitution(1)
        t = expect(ctx, 15) # :equal
        tree.add(t)
        subtree = parse_e(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[110] if x >=0],
      rules[103]
    )
def parse_map(ctx):
    current = ctx.tokens.current()
    rule = table[53][current.id] if current else -1
    tree = ParseTree(NonTerminal(111, 'map'))
    ctx.nonterminal = "map"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 64: # $map = :lbrace $_gen18 :rbrace -> $1
        ctx.rule = rules[64]
        tree.astTransform = AstTransformSubstitution(1)
        t = expect(ctx, 42) # :lbrace
        tree.add(t)
        subtree = parse__gen18(ctx)
        tree.add(subtree)
        t = expect(ctx, 54) # :rbrace
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[111] if x >=0],
      rules[64]
    )
def parse_declaration(ctx):
    current = ctx.tokens.current()
    rule = table[54][current.id] if current else -1
    tree = ParseTree(NonTerminal(112, 'declaration'))
    ctx.nonterminal = "declaration"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 102: # $declaration = $type_e :identifier $_gen30 -> Declaration( type=$0, name=$1, expression=$2 )
        ctx.rule = rules[102]
        ast_parameters = OrderedDict([
            ('type', 0),
            ('name', 1),
            ('expression', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('Declaration', ast_parameters)
        subtree = parse_type_e(ctx)
        tree.add(subtree)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        subtree = parse__gen30(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[112] if x >=0],
      rules[102]
    )
def parse__gen3(ctx):
    current = ctx.tokens.current()
    rule = table[55][current.id] if current else -1
    tree = ParseTree(NonTerminal(113, '_gen3'))
    ctx.nonterminal = "_gen3"
    tree.list = True
    if current != None and current.id in nonterminal_follow[113] and current.id not in nonterminal_first[113]:
        return tree
    if current == None:
        return tree
    if rule == 5: # $_gen3 = $workflow_or_task $_gen3
        ctx.rule = rules[5]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_workflow_or_task(ctx)
        tree.add(subtree)
        subtree = parse__gen3(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen36(ctx):
    current = ctx.tokens.current()
    rule = table[56][current.id] if current else -1
    tree = ParseTree(NonTerminal(114, '_gen36'))
    ctx.nonterminal = "_gen36"
    tree.list = True
    if current != None and current.id in nonterminal_follow[114] and current.id not in nonterminal_first[114]:
        return tree
    if current == None:
        return tree
    if rule == 135: # $_gen36 = :comma $object_kv $_gen36
        ctx.rule = rules[135]
        tree.astTransform = AstTransformSubstitution(0)
        t = expect(ctx, 9) # :comma
        tree.add(t)
        tree.listSeparator = t
        subtree = parse_object_kv(ctx)
        tree.add(subtree)
        subtree = parse__gen36(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_kv(ctx):
    current = ctx.tokens.current()
    rule = table[57][current.id] if current else -1
    tree = ParseTree(NonTerminal(115, 'kv'))
    ctx.nonterminal = "kv"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 65: # $kv = :identifier :colon $e -> RuntimeAttribute( key=$0, value=$2 )
        ctx.rule = rules[65]
        ast_parameters = OrderedDict([
            ('key', 0),
            ('value', 2),
        ])
        tree.astTransform = AstTransformNodeCreator('RuntimeAttribute', ast_parameters)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        t = expect(ctx, 39) # :colon
        tree.add(t)
        subtree = parse_e(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[115] if x >=0],
      rules[65]
    )
def parse__gen12(ctx):
    current = ctx.tokens.current()
    rule = table[58][current.id] if current else -1
    tree = ParseTree(NonTerminal(116, '_gen12'))
    ctx.nonterminal = "_gen12"
    tree.list = True
    if current != None and current.id in nonterminal_follow[116] and current.id not in nonterminal_first[116]:
        return tree
    if current == None:
        return tree
    if rule == 37: # $_gen12 = $cmd_param_kv $_gen12
        ctx.rule = rules[37]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_cmd_param_kv(ctx)
        tree.add(subtree)
        subtree = parse__gen12(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen1(ctx):
    current = ctx.tokens.current()
    rule = table[59][current.id] if current else -1
    tree = ParseTree(NonTerminal(117, '_gen1'))
    ctx.nonterminal = "_gen1"
    tree.list = True
    if current != None and current.id in nonterminal_follow[117] and current.id not in nonterminal_first[117]:
        return tree
    if current == None:
        return tree
    if rule == 1: # $_gen1 = $import $_gen1
        ctx.rule = rules[1]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_import(ctx)
        tree.add(subtree)
        subtree = parse__gen1(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen27(ctx):
    current = ctx.tokens.current()
    rule = table[60][current.id] if current else -1
    tree = ParseTree(NonTerminal(118, '_gen27'))
    ctx.nonterminal = "_gen27"
    tree.list = True
    if current != None and current.id in nonterminal_follow[118] and current.id not in nonterminal_first[118]:
        return tree
    if current == None:
        return tree
    if rule == 86: # $_gen27 = $call_input $_gen27
        ctx.rule = rules[86]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_call_input(ctx)
        tree.add(subtree)
        subtree = parse__gen27(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_parameter_meta(ctx):
    current = ctx.tokens.current()
    rule = table[61][current.id] if current else -1
    tree = ParseTree(NonTerminal(119, 'parameter_meta'))
    ctx.nonterminal = "parameter_meta"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 58: # $parameter_meta = :parameter_meta $map -> ParameterMeta( map=$1 )
        ctx.rule = rules[58]
        ast_parameters = OrderedDict([
            ('map', 1),
        ])
        tree.astTransform = AstTransformNodeCreator('ParameterMeta', ast_parameters)
        t = expect(ctx, 14) # :parameter_meta
        tree.add(t)
        subtree = parse_map(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[119] if x >=0],
      rules[58]
    )
def parse__gen30(ctx):
    current = ctx.tokens.current()
    rule = table[62][current.id] if current else -1
    tree = ParseTree(NonTerminal(120, '_gen30'))
    ctx.nonterminal = "_gen30"
    tree.list = False
    if current != None and current.id in nonterminal_follow[120] and current.id not in nonterminal_first[120]:
        return tree
    if current == None:
        return tree
    if rule == 100: # $_gen30 = $setter
        ctx.rule = rules[100]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_setter(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen34(ctx):
    current = ctx.tokens.current()
    rule = table[63][current.id] if current else -1
    tree = ParseTree(NonTerminal(121, '_gen34'))
    ctx.nonterminal = "_gen34"
    tree.list = True
    if current != None and current.id in nonterminal_follow[121] and current.id not in nonterminal_first[121]:
        return tree
    if current == None:
        return tree
    if rule == 128: # $_gen34 = :comma $e $_gen34
        ctx.rule = rules[128]
        tree.astTransform = AstTransformSubstitution(0)
        t = expect(ctx, 9) # :comma
        tree.add(t)
        tree.listSeparator = t
        subtree = parse_e(ctx)
        tree.add(subtree)
        subtree = parse__gen34(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_alias(ctx):
    current = ctx.tokens.current()
    rule = table[64][current.id] if current else -1
    tree = ParseTree(NonTerminal(122, 'alias'))
    ctx.nonterminal = "alias"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 96: # $alias = :as :identifier -> $1
        ctx.rule = rules[96]
        tree.astTransform = AstTransformSubstitution(1)
        t = expect(ctx, 48) # :as
        tree.add(t)
        t = expect(ctx, 13) # :identifier
        tree.add(t)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[122] if x >=0],
      rules[96]
    )
def parse__gen28(ctx):
    current = ctx.tokens.current()
    rule = table[65][current.id] if current else -1
    tree = ParseTree(NonTerminal(123, '_gen28'))
    ctx.nonterminal = "_gen28"
    tree.list = True
    if current != None and current.id in nonterminal_follow[123] and current.id not in nonterminal_first[123]:
        return tree
    if current == None:
        return tree
    if rule == 90: # $_gen28 = $mapping $_gen29
        ctx.rule = rules[90]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_mapping(ctx)
        tree.add(subtree)
        subtree = parse__gen29(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse_runtime(ctx):
    current = ctx.tokens.current()
    rule = table[66][current.id] if current else -1
    tree = ParseTree(NonTerminal(124, 'runtime'))
    ctx.nonterminal = "runtime"
    tree.list = False
    if current == None:
        raise ctx.errors.unexpected_eof()
    if rule == 57: # $runtime = :runtime $map -> Runtime( map=$1 )
        ctx.rule = rules[57]
        ast_parameters = OrderedDict([
            ('map', 1),
        ])
        tree.astTransform = AstTransformNodeCreator('Runtime', ast_parameters)
        t = expect(ctx, 53) # :runtime
        tree.add(t)
        subtree = parse_map(ctx)
        tree.add(subtree)
        return tree
    raise ctx.errors.unexpected_symbol(
      ctx.nonterminal,
      ctx.tokens.current(),
      [terminals[x] for x in nonterminal_first[124] if x >=0],
      rules[57]
    )
def parse__gen0(ctx):
    current = ctx.tokens.current()
    rule = table[67][current.id] if current else -1
    tree = ParseTree(NonTerminal(125, '_gen0'))
    ctx.nonterminal = "_gen0"
    tree.list = True
    if current != None and current.id in nonterminal_follow[125] and current.id not in nonterminal_first[125]:
        return tree
    if current == None:
        return tree
    if rule == 0: # $_gen0 = $import $_gen1
        ctx.rule = rules[0]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_import(ctx)
        tree.add(subtree)
        subtree = parse__gen1(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen20(ctx):
    current = ctx.tokens.current()
    rule = table[68][current.id] if current else -1
    tree = ParseTree(NonTerminal(126, '_gen20'))
    ctx.nonterminal = "_gen20"
    tree.list = True
    if current != None and current.id in nonterminal_follow[126] and current.id not in nonterminal_first[126]:
        return tree
    if current == None:
        return tree
    if rule == 66: # $_gen20 = $wf_body_element $_gen21
        ctx.rule = rules[66]
        tree.astTransform = AstTransformSubstitution(0)
        subtree = parse_wf_body_element(ctx)
        tree.add(subtree)
        subtree = parse__gen21(ctx)
        tree.add(subtree)
        return tree
    return tree
def parse__gen32(ctx):
    current = ctx.tokens.current()
    rule = table[69][current.id] if current else -1
    tree = ParseTree(NonTerminal(127, '_gen32'))
    ctx.nonterminal = "_gen32"
    tree.list = True
    if current != None and current.id in nonterminal_follow[127] and current.id not in nonterminal_first[127]:
        return tree
    if current == None:
        return tree
    if rule == 106: # $_gen32 = :comma $type_e $_gen32
        ctx.rule = rules[106]
        tree.astTransform = AstTransformSubstitution(0)
        t = expect(ctx, 9) # :comma
        tree.add(t)
        tree.listSeparator = t
        subtree = parse_type_e(ctx)
        tree.add(subtree)
        subtree = parse__gen32(ctx)
        tree.add(subtree)
        return tree
    return tree
# Lexer Code #
# START USER CODE
# END USER CODE
def emit(ctx, terminal, source_string, line, col):
    if terminal:
        ctx.tokens.append(Terminal(terminals[terminal], terminal, source_string, ctx.resource, line, col))
def default_action(ctx, terminal, source_string, line, col):
    emit(ctx, terminal, source_string, line, col)
def init():
    return {}
def destroy(context):
    pass
class LexerStackPush:
    def __init__(self, mode):
        self.mode = mode
class LexerAction:
    def __init__(self, action):
        self.action = action
class LexerContext:
    def __init__(self, string, resource, errors, user_context):
        self.__dict__.update(locals())
        self.stack = ['default']
        self.line = 1
        self.col = 1
        self.tokens = []
        self.user_context = user_context
        self.re_match = None # https://docs.python.org/3/library/re.html#match-objects
class HermesLexer:
    regex = {
        'default': OrderedDict([
          (re.compile(r'\s+'), [
              # (terminal, group, function)
          ]),
          (re.compile(r'/\*(.*?)\*/', re.DOTALL), [
              # (terminal, group, function)
          ]),
          (re.compile(r'#.*'), [
              # (terminal, group, function)
          ]),
          (re.compile(r'task(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('task', 0, None),
          ]),
          (re.compile(r'(call)\s+'), [
              # (terminal, group, function)
              ('call', 1, None),
              LexerStackPush('task_fqn'),
          ]),
          (re.compile(r'workflow(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('workflow', 0, None),
          ]),
          (re.compile(r'import(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('import', 0, None),
          ]),
          (re.compile(r'input(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('input', 0, None),
          ]),
          (re.compile(r'output(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('output', 0, None),
          ]),
          (re.compile(r'as(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('as', 0, None),
          ]),
          (re.compile(r'if(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('if', 0, None),
          ]),
          (re.compile(r'while(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('while', 0, None),
          ]),
          (re.compile(r'runtime(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('runtime', 0, None),
          ]),
          (re.compile(r'scatter(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('scatter', 0, None),
              LexerStackPush('scatter'),
          ]),
          (re.compile(r'command\s*(?=<<<)'), [
              # (terminal, group, function)
              ('raw_command', 0, None),
              LexerStackPush('raw_command2'),
          ]),
          (re.compile(r'command\s*(?=\{)'), [
              # (terminal, group, function)
              ('raw_command', 0, None),
              LexerStackPush('raw_command'),
          ]),
          (re.compile(r'parameter_meta(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('parameter_meta', 0, None),
          ]),
          (re.compile(r'meta(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('meta', 0, None),
          ]),
          (re.compile(r'(true|false)(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('boolean', 0, None),
          ]),
          (re.compile(r'(object)\s*(\{)'), [
              # (terminal, group, function)
              ('object', 0, None),
              ('lbrace', 0, None),
          ]),
          (re.compile(r'(Array|Map|Object|Boolean|Int|Float|Uri|File|String)(?![a-zA-Z0-9_])(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('type', 0, None),
          ]),
          (re.compile(r'[a-zA-Z]([a-zA-Z0-9_])*'), [
              # (terminal, group, function)
              ('identifier', 0, None),
          ]),
          (re.compile(r'"([^\"]+)"'), [
              # (terminal, group, function)
              ('string', 1, None),
          ]),
          (re.compile(r'\'([^\']+)\''), [
              # (terminal, group, function)
              ('string', 1, None),
          ]),
          (re.compile(r':'), [
              # (terminal, group, function)
              ('colon', 0, None),
          ]),
          (re.compile(r','), [
              # (terminal, group, function)
              ('comma', 0, None),
          ]),
          (re.compile(r'=='), [
              # (terminal, group, function)
              ('double_equal', 0, None),
          ]),
          (re.compile(r'\|\|'), [
              # (terminal, group, function)
              ('double_pipe', 0, None),
          ]),
          (re.compile(r'\&\&'), [
              # (terminal, group, function)
              ('double_ampersand', 0, None),
          ]),
          (re.compile(r'!='), [
              # (terminal, group, function)
              ('not_equal', 0, None),
          ]),
          (re.compile(r'='), [
              # (terminal, group, function)
              ('equal', 0, None),
          ]),
          (re.compile(r'\.'), [
              # (terminal, group, function)
              ('dot', 0, None),
          ]),
          (re.compile(r'\{'), [
              # (terminal, group, function)
              ('lbrace', 0, None),
          ]),
          (re.compile(r'\}'), [
              # (terminal, group, function)
              ('rbrace', 0, None),
          ]),
          (re.compile(r'\('), [
              # (terminal, group, function)
              ('lparen', 0, None),
          ]),
          (re.compile(r'\)'), [
              # (terminal, group, function)
              ('rparen', 0, None),
          ]),
          (re.compile(r'\['), [
              # (terminal, group, function)
              ('lsquare', 0, None),
          ]),
          (re.compile(r'\]'), [
              # (terminal, group, function)
              ('rsquare', 0, None),
          ]),
          (re.compile(r'\+'), [
              # (terminal, group, function)
              ('plus', 0, None),
          ]),
          (re.compile(r'\*'), [
              # (terminal, group, function)
              ('asterisk', 0, None),
          ]),
          (re.compile(r'-'), [
              # (terminal, group, function)
              ('dash', 0, None),
          ]),
          (re.compile(r'/'), [
              # (terminal, group, function)
              ('slash', 0, None),
          ]),
          (re.compile(r'%'), [
              # (terminal, group, function)
              ('percent', 0, None),
          ]),
          (re.compile(r'<='), [
              # (terminal, group, function)
              ('lteq', 0, None),
          ]),
          (re.compile(r'<'), [
              # (terminal, group, function)
              ('lt', 0, None),
          ]),
          (re.compile(r'>='), [
              # (terminal, group, function)
              ('gteq', 0, None),
          ]),
          (re.compile(r'>'), [
              # (terminal, group, function)
              ('gt', 0, None),
          ]),
          (re.compile(r'!'), [
              # (terminal, group, function)
              ('not', 0, None),
          ]),
          (re.compile(r'-?[0-9]+\.[0-9]+'), [
              # (terminal, group, function)
              ('float', 0, None),
          ]),
          (re.compile(r'[0-9]+'), [
              # (terminal, group, function)
              ('integer', 0, None),
          ]),
        ]),
        'task_fqn': OrderedDict([
          (re.compile(r'\s+'), [
              # (terminal, group, function)
          ]),
          (re.compile(r'[a-zA-Z]([a-zA-Z0-9_])*(\.[a-zA-Z]([a-zA-Z0-9_])*)*'), [
              # (terminal, group, function)
              ('ns_identifier', 0, None),
              LexerAction('pop'),
          ]),
        ]),
        'scatter': OrderedDict([
          (re.compile(r'\s+'), [
              # (terminal, group, function)
          ]),
          (re.compile(r'\)'), [
              # (terminal, group, function)
              ('rparen', 0, None),
              LexerAction('pop'),
          ]),
          (re.compile(r'\('), [
              # (terminal, group, function)
              ('lparen', 0, None),
          ]),
          (re.compile(r'\.'), [
              # (terminal, group, function)
              ('dot', 0, None),
          ]),
          (re.compile(r'\['), [
              # (terminal, group, function)
              ('lsquare', 0, None),
          ]),
          (re.compile(r'\]'), [
              # (terminal, group, function)
              ('rsquare', 0, None),
          ]),
          (re.compile(r'in(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('in', 0, None),
          ]),
          (re.compile(r'[a-zA-Z]([a-zA-Z0-9_])*'), [
              # (terminal, group, function)
              ('identifier', 0, None),
          ]),
        ]),
        'raw_command': OrderedDict([
          (re.compile(r'\{'), [
              # (terminal, group, function)
              ('raw_cmd_start', 0, None),
          ]),
          (re.compile(r'\}'), [
              # (terminal, group, function)
              ('raw_cmd_end', 0, None),
              LexerAction('pop'),
          ]),
          (re.compile(r'\$\{'), [
              # (terminal, group, function)
              ('cmd_param_start', 0, None),
              LexerStackPush('cmd_param'),
          ]),
          (re.compile(r'(.*?)(?=\$\{|\})', re.DOTALL), [
              # (terminal, group, function)
              ('cmd_part', 0, None),
          ]),
        ]),
        'raw_command2': OrderedDict([
          (re.compile(r'<<<'), [
              # (terminal, group, function)
              ('raw_cmd_start', 0, None),
          ]),
          (re.compile(r'>>>'), [
              # (terminal, group, function)
              ('raw_cmd_end', 0, None),
              LexerAction('pop'),
          ]),
          (re.compile(r'\$\{'), [
              # (terminal, group, function)
              ('cmd_param_start', 0, None),
              LexerStackPush('cmd_param'),
          ]),
          (re.compile(r'(.*?)(?=\$\{|>>>)', re.DOTALL), [
              # (terminal, group, function)
              ('cmd_part', 0, None),
          ]),
        ]),
        'cmd_param': OrderedDict([
          (re.compile(r'\s+'), [
              # (terminal, group, function)
          ]),
          (re.compile(r'\}'), [
              # (terminal, group, function)
              ('cmd_param_end', 0, None),
              LexerAction('pop'),
          ]),
          (re.compile(r'\['), [
              # (terminal, group, function)
              ('lsquare', 0, None),
          ]),
          (re.compile(r'\]'), [
              # (terminal, group, function)
              ('rsquare', 0, None),
          ]),
          (re.compile(r'='), [
              # (terminal, group, function)
              ('equal', 0, None),
          ]),
          (re.compile(r'\?'), [
              # (terminal, group, function)
              ('qmark', 0, None),
          ]),
          (re.compile(r'\+'), [
              # (terminal, group, function)
              ('plus', 0, None),
          ]),
          (re.compile(r'\*'), [
              # (terminal, group, function)
              ('asterisk', 0, None),
          ]),
          (re.compile(r'[0-9]+'), [
              # (terminal, group, function)
              ('integer', 0, None),
          ]),
          (re.compile(r'(true|false)(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('boolean', 0, None),
          ]),
          (re.compile(r'(Array|Map|Object|Boolean|Int|Float|Uri|File|String)(?![a-zA-Z0-9_])(?![a-zA-Z0-9_])'), [
              # (terminal, group, function)
              ('type', 0, None),
          ]),
          (re.compile(r'[a-zA-Z]([a-zA-Z0-9_])*(?=\s*=)'), [
              # (terminal, group, function)
              ('cmd_attr_hint', None, None),
              ('identifier', 0, None),
          ]),
          (re.compile(r'[a-zA-Z]([a-zA-Z0-9_])*'), [
              # (terminal, group, function)
              ('identifier', 0, None),
          ]),
          (re.compile(r'"([^\"]+)"'), [
              # (terminal, group, function)
              ('string', 1, None),
          ]),
          (re.compile(r'\'([^\']+)\''), [
              # (terminal, group, function)
              ('string', 1, None),
          ]),
        ]),
    }
    def _advance_line_col(self, string, length, line, col):
        for i in range(length):
            if string[i] == '\n':
                line += 1
                col = 1
            else:
                col += 1
        return (line, col)
    def _advance_string(self, ctx, string):
        (ctx.line, ctx.col) = self._advance_line_col(string, len(string), ctx.line, ctx.col)
        ctx.string = ctx.string[len(string):]
    def _next(self, ctx, debug=False):
        for regex, outputs in self.regex[ctx.stack[-1]].items():
            if debug:
                from xtermcolor import colorize
                token_count = len(ctx.tokens)
                print('{1} ({2}, {3}) regex: {0}'.format(
                    colorize(regex.pattern, ansi=40), colorize(ctx.string[:20].replace('\n', '\\n'), ansi=15), ctx.line, ctx.col)
                )
            match = regex.match(ctx.string)
            if match:
                ctx.re_match = match
                for output in outputs:
                    if isinstance(output, tuple):
                        (terminal, group, function) = output
                        function = function if function else default_action
                        source_string = match.group(group) if group is not None else ''
                        (group_line, group_col) = self._advance_line_col(ctx.string, match.start(group) if group else 0, ctx.line, ctx.col)
                        function(
                            ctx,
                            terminal,
                            source_string,
                            group_line,
                            group_col
                        )
                        if debug:
                            print('    matched: {}'.format(colorize(match.group(0).replace('\n', '\\n'), ansi=3)))
                            for token in ctx.tokens[token_count:]:
                                print('    emit: [{}] [{}, {}] [{}] stack:{} context:{}'.format(
                                    colorize(token.str, ansi=9),
                                    colorize(str(token.line), ansi=5),
                                    colorize(str(token.col), ansi=5),
                                    colorize(token.source_string, ansi=3),
                                    colorize(str(ctx.stack), ansi=4),
                                    colorize(str(ctx.user_context), ansi=13)
                                ))
                            token_count = len(ctx.tokens)
                    if isinstance(output, LexerStackPush):
                        ctx.stack.append(output.mode)
                        if debug:
                            print('    push on stack: {}'.format(colorize(output.mode, ansi=4)))
                    if isinstance(output, LexerAction):
                        if output.action == 'pop':
                            mode = ctx.stack.pop()
                            if debug:
                                print('    pop off stack: {}'.format(colorize(mode, ansi=4)))
                self._advance_string(ctx, match.group(0))
                return len(match.group(0)) > 0
        return False
    def lex(self, string, resource, errors=None, debug=False):
        if errors is None:
            errors = DefaultSyntaxErrorHandler()
        string_copy = string
        user_context = init()
        ctx = LexerContext(string, resource, errors, user_context)
        while len(ctx.string):
            matched = self._next(ctx, debug)
            if matched == False:
                raise ctx.errors.unrecognized_token(string_copy, ctx.line, ctx.col)
        destroy(ctx.user_context)
        return ctx.tokens
def lex(source, resource, errors=None, debug=False):
    return TokenStream(HermesLexer().lex(source, resource, errors, debug))
